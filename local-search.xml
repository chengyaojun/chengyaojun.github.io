<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Web3.j开发你的第一个Dapp</title>
    <link href="/2023/01/17/web3-dapp/"/>
    <url>/2023/01/17/web3-dapp/</url>
    
    <content type="html"><![CDATA[<h1 id="使用-Web3-j-开发你的第一个-Dapp"><a href="#使用-Web3-j-开发你的第一个-Dapp" class="headerlink" title="使用 Web3.j 开发你的第一个 Dapp"></a>使用 Web3.j 开发你的第一个 Dapp</h1><p>Web3js 简介</p><hr><blockquote><ul><li>原文地址：<a href="https://medium.com/nerd-for-tech/develop-your-first-dapp-with-web3-js-d19354925df0">Develop your first Dapp with Web3.js</a></li><li>原文作者：<a href="https://medium.com/@codemaker2015?source=post_page-----d19354925df0-----------------------------------">Vishnu Sivan</a></li><li>译者：瞌睡虫</li></ul></blockquote><p>大量的加密货币的出现给数字支付带来新的希望，区跨链使这一切成为可能。很难想象去中心化货币的意义。Dapp 代表了互联网的全新愿景，完全不同于当前互联网的迭代。加密货币（或可编程代币）和智能合约等数字资产是去中心化应用（DApps）的核心组成部分，因为他们部署在区块链上。Web3.js 是一个库的集合，允许你与本地或者远程的以太坊节点交互。使用 HTTP 或 IPC 连接是开发 dapps 的骨干。</p><p>在本文中，我们将尝试使用 Web3js 构建一个去中心化 APP。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a><strong>开始</strong></h2><p>今天，我们试图了解 Dapps 和 Web3js 基础知识。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a><strong>目录</strong></h2><ul><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">基本术语</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">去中心化应用(Dapps)</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">Web3.js</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">它是如何工作的</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">Web3.js 软件包</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">第一个 Dapp</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">设置环境</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">编写合约</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">设置迁移(migration)</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">编译和部署</a></li><li><a href="https://www.notion.so/Web3-j-Dapp-b6bde826e74244d3a48228f7c1e5c1ac">连接前端与智能合约</a></li></ul><p>让我们从基本术语开始 — 区块链、去中心化应用、以太坊、智能合约以及 web3js。</p><h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>区块链是一个可审计的数据库。只能在数据库中添加数据，但不能删除或更改数据。数据能被定期的添加到被称为<em>块（blocks）</em>的数据库中。顾名思义，一些列这些块连接在一起被称为<em>区块链(Blockchain).</em></p><h2 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a><strong>以太坊</strong></h2><p>以太坊是一个基于区块链域名的去中心化开平台，用于运行智能合约，即完全按照编程方式执行程序的应用程序，没有任何欺诈、第三方干预、审查或停机的可能。</p><h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p>智能合约是指存储在区块链上的高级程序代码，编译成以太坊虚拟机，然后发布到以太坊区块链上执行。它让你能够在没有第三方干预的情况下进行值得信赖的交易；这些交易是可追踪的且不可逆的。通常用于创建和编写智能合约的编程语言是 Serpent, Solidity, Mutan, and LLL.</p><h2 id="去中心化应用（Dapps）"><a href="#去中心化应用（Dapps）" class="headerlink" title="去中心化应用（Dapps）"></a>去中心化应用（Dapps）</h2><p>去中心化应用（Dapp）是一种数字应用程序或程序，它驻留区块链或点对点计算机网络上执行，而不是单台计算机并且独立于任何人的权威控制。</p><p>Dapp 是去中心化应用的缩写，这意味着它不受单个组织控，在不受中央控制的公共、开源、去中心化环境中的区块链网络上运行。</p><p><img src="https://miro.medium.com/max/1352/1*dd8jhjxugD-xLPbi5lGE_g.png" alt="https://miro.medium.com/max/1352/1*dd8jhjxugD-xLPbi5lGE_g.png"></p><p>去中心化应用有三个主要组成部分：</p><ul><li><strong>前端</strong>：从用户那里获取输入，并构建要发送到智能合约的请求。</li><li><strong>钱包</strong>：签署交易并发送到网络</li><li><strong>智能合约</strong>：这里是你编写 dapp 业务逻辑的地方</li></ul><p>Dapp 有以下这些特性</p><ul><li><strong>无停机时间 —</strong> 不会有停机时间或限制，因为它不像托管服务器那样依赖于单点故障，而是运行在点对点计算机网络</li><li><strong>透明 —</strong> 来自去中心化应用的数据存储在公共账本上，该账本以安全并透明的方式跟踪所有内容，确保没有人可以篡改它</li><li><strong>开源 —</strong> 开源 dApps 的代码可供查看。应为可以提供更多的输入，整个生态系统更具适应性、进步更快、发展更安全</li></ul><h2 id="Web3-js"><a href="#Web3-js" class="headerlink" title="Web3.js"></a>Web3.js</h2><p>Web3.js 是一个库的集合，允许你使用 HTTP、IPC 或 Websocket 与本地或远程以太坊节点进行交互。Web3.js 为我们提供了与 geth 通信的 Javascript API。它在内部使用 JSON-RPC 与 geth 通信。Web3.js 还可以与支持 JSON-RPC 的任何其他类型节点通信。它所有的 JSON-RPC API 公开为 JavaScript API。</p><h2 id="它是如何运作的"><a href="#它是如何运作的" class="headerlink" title="它是如何运作的"></a>它是如何运作的</h2><p><img src="https://miro.medium.com/max/1400/1*GiFsmkvKdaltzBkr6g0X4w.png" alt="图片来源 iotbl"></p><p>图片来源 iotbl</p><p>Web3.js 使用 JSON-RPC 与以太坊区块链进行对话，JSON-RPC 代表“远程过程调用”协议。以太坊是一个点对点的节点网络，将所有数据、代码的副本存储在区块链上。Web3.js 允许我们使用 JSON-RPC 向单个以太坊节点发送请求，以便向网络读写数据。这点就像使用带有 JSON API 的 jQuery 来读写数据到 Web 服务器。</p><p>为了将 JavaScript 代码转换为 json-rpc 请求，web3.js 使用我们称为 provider 并实现了负责进行以太坊 RPC 方法调用的方法。Web3.js 上述提到的规范的实现，并使其在<code>web3.providers、HttpProvider、WebsocketProvider</code> 和<code>IpcProvider</code>下可以用</p><h2 id="Web3-js-软件包"><a href="#Web3-js-软件包" class="headerlink" title="Web3.js 软件包"></a>Web3.js 软件包</h2><p>web3.js 附带五个主要的软件包：</p><ul><li><code>web3.eth</code>: 允许与以太坊区块链和以太坊智能合约进行交互。</li><li><code>web3.bzz</code>: 允许与去中心化文件存储 Swarm 进行交互。</li><li><code>web3.shh</code>: 允许与 Whisper 协议交互以进行广播。</li><li><code>web3.utils</code>: 为以太坊 dapps 提供实用工具函数，例如将字符串转化为十六进制标识，将以太币（Ether）值转化为 Wei。</li><li><code>web3.*.net</code>: 允许与以太坊节点的网络属性（如网络 ID 或节点数）进行交互。</li></ul><h2 id="第一个-APP"><a href="#第一个-APP" class="headerlink" title="第一个 APP"></a>第一个 APP</h2><p>我们已经了解了基本的概念。现在，让我们深入了解第一个 dAPP</p><h3 id="1-设置环境"><a href="#1-设置环境" class="headerlink" title="1. 设置环境"></a>1. 设置环境</h3><p>基本上，dAPP 要求你的机器安装 nodejs、truffle 和 ganache。</p><p><strong>Node.js</strong> — 允许你使用 JavaScript 顺利的构建你的 Web 界面，并与区跨链交互</p><p><strong>Truffle</strong> — 以太坊最受欢迎的开发框架</p><p><strong>Ganache</strong> — Truffle 套件的一部分，它为你提供了一个本地网络，在设计精美的控制台上展示账户和交易</p><p><strong>Solc</strong> — <a href="https://github.com/ethereum/solidity">Solidity</a> 编译器的 JavaScript 绑定。</p><ul><li><a href="https://nodejs.org/dist/v16.13.1/node-v16.13.1-x64.msi">下载</a> 和 安装 <a href="https://nodejs.org/en/download/">node.js</a></li><li>全局安装<a href="https://www.trufflesuite.com/truffle">Truffle</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g truffle<br></code></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/1400/0*OfjJ7kKWgVxDRJSb.png" alt="https://miro.medium.com/max/1400/0*OfjJ7kKWgVxDRJSb.png"></p><p><img src="https://miro.medium.com/max/1400/0*XnoJ3d8gZEMDJ9Vv.png" alt="https://miro.medium.com/max/1400/0*XnoJ3d8gZEMDJ9Vv.png"></p><ul><li><a href="https://objects.githubusercontent.com/github-production-release-asset-2e65be/79269625/f157fd00-185e-11eb-9efb-d7c749098bd0?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AKIAIWNJYAX4CSVEH53A/20220106/us-east-1/s3/aws4_request&X-Amz-Date=20220106T122145Z&X-Amz-Expires=300&X-Amz-Signature=5e3aebb5f97b2bf4b8e84d9cdb8015aa036b2b58763902c2141e953e423d2125&X-Amz-SignedHeaders=host&actor_id=16046782&key_id=0&repo_id=79269625&response-content-disposition=attachment;%20filename=Ganache-2.5.4-win-x64.appx&response-content-type=application/octet-stream">下载</a>和安装<a href="https://trufflesuite.com/ganache/">ganache-cli</a></li></ul><p><img src="https://miro.medium.com/max/1294/0*AMsh9QBovNQhN4H6.png" alt="https://miro.medium.com/max/1294/0*AMsh9QBovNQhN4H6.png"></p><ul><li>全局安装<a href="https://www.npmjs.com/package/solc">solc</a></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g solc<br></code></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/1400/1*Jzj9NpTkAZURiyCXhACjkA.png" alt="https://miro.medium.com/max/1400/1*Jzj9NpTkAZURiyCXhACjkA.png"></p><p>软件已经安装完成。现在，我们可以设置项目了。</p><p>让我们通过创建一个名为 dapp-demo 的项目文件夹，切换的文件夹下并使用 truffle 进行初始化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir dapp-demo<br><span class="hljs-built_in">cd</span> dapp-demo<br>truffle init<br></code></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/1400/1*eldAUUdN8LX5YMMczdMJaQ.png" alt="https://miro.medium.com/max/1400/1*eldAUUdN8LX5YMMczdMJaQ.png"></p><p>这里我们将创建你需要的所有项目文件，你应该看到如下内容：</p><p><img src="https://miro.medium.com/max/1400/1*6VY_pUmMTfgdFjV0a9SHVw.png" alt="https://miro.medium.com/max/1400/1*6VY_pUmMTfgdFjV0a9SHVw.png"></p><h3 id="2-编写合约"><a href="#2-编写合约" class="headerlink" title="2. 编写合约"></a>2. 编写合约</h3><p>现在，是时候在你的项目中创建<code>greeting</code>合约。为此，需要创建一个文件名为 Greting.sol 并将该文件放置<code>contracts</code>文件夹下 ，并在其中添加如下代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs solidity">&#x2F;&#x2F; SPDX-License-Identifier: MIT<br>pragma solidity &gt;&#x3D;0.4.22 &lt;0.9.0;<br>contract Greeting &#123;<br><br>  string public greeting &#x3D; &quot;hello&quot;;<br>  function sayHello() external view returns (string memory) &#123;<br>      return greeting;<br>  &#125;<br>  function updateGreeting(string calldata _greeting) external &#123;<br>      greeting &#x3D; _greeting;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-设置迁移"><a href="#3-设置迁移" class="headerlink" title="3. 设置迁移"></a>3. 设置迁移</h3><p>在<code>migrations</code>文件夹中使用大于 1 的前缀创建一个新文件，例如，<code>2_greeting_migartion.js</code>部署<code>HelloWorld.sol</code>合约。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> Greeting = artifacts.require(<span class="hljs-string">&#x27;Greeting&#x27;</span>);<br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">deployer</span>) </span>&#123;<br>deployer.deploy(Greeting);<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="4-编译和部署"><a href="#4-编译和部署" class="headerlink" title="4. 编译和部署"></a>4. 编译和部署</h3><p>使用下面命令编译你的项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">truffle compile<br></code></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/1400/1*_GA8q2TzJKMOsqC6h11cEg.png" alt="https://miro.medium.com/max/1400/1*_GA8q2TzJKMOsqC6h11cEg.png"></p><p>编译成功之后在你的项目文件夹中将创建一个<code>build</code>文件夹。</p><p>现在，我们需要与 Truffle、Ganache 一起部署和测试你的合约。为此，打开 Ganache，选择”QuickStart” 并保持打开状态。</p><p>接下来，需要让 Truffle 知道部署在哪个网络上。转到<code>truffle-config.js</code>并通过取消<code>deveopment</code>部分的注释来修改网络详情。但请确保来自 Ganache 的 RPC 服务器端口与配置中的端口号一致。</p><p><img src="https://miro.medium.com/max/1400/0*XNzCraTTgvQqHv1j.png" alt="https://miro.medium.com/max/1400/0*XNzCraTTgvQqHv1j.png"></p><p><img src="https://miro.medium.com/max/1400/1*XE_1emxqWw_dwV5ATjfSHA.png" alt="https://miro.medium.com/max/1400/1*XE_1emxqWw_dwV5ATjfSHA.png"></p><p>使用下面命令部署合约</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">truffle deploy --network development<br></code></pre></td></tr></table></figure><p>确认部署事务后，终端将反馈给你一些关于合约的详细信息，例如合约地址、区块信息。</p><p><img src="https://miro.medium.com/max/1400/1*BUOfwfdQ_AGRTTXoA1XVog.png" alt="https://miro.medium.com/max/1400/1*BUOfwfdQ_AGRTTXoA1XVog.png"></p><h3 id="5-连接前端与智能合约"><a href="#5-连接前端与智能合约" class="headerlink" title="5. 连接前端与智能合约"></a>5. 连接前端与智能合约</h3><p><strong>5.1 设置环境</strong></p><p>在根目录下面创建一个名为<code>client</code>的新文件夹，并使用 npm 初始化。然后安装 web3.js 和 lite-server 依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mkdir client<br><span class="hljs-built_in">cd</span> client<br>npm init<br>npm install web3<br>npm install lite-server --save-dev<br>npm install jquery<br></code></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/1400/1*8ispMi4jvWqpZcQUtWIB_g.png" alt="https://miro.medium.com/max/1400/1*8ispMi4jvWqpZcQUtWIB_g.png"></p><p><img src="https://miro.medium.com/max/1530/1*HJC2wetULjjoETDeU7pQ8A.png" alt="https://miro.medium.com/max/1530/1*HJC2wetULjjoETDeU7pQ8A.png"></p><p><img src="/img/1_p4RFz_rtNGwkNZNt8nbjog.png" alt="1_p4RFz_rtNGwkNZNt8nbjog.png"></p><p><img src="https://miro.medium.com/max/1532/1*lO2Zfc_pS2YDSY7bhX7lbQ.png" alt="https://miro.medium.com/max/1532/1*lO2Zfc_pS2YDSY7bhX7lbQ.png"></p><p><img src="https://miro.medium.com/max/1532/1*1hFiTf2WxqFoDdtec4A8wA.png" alt="https://miro.medium.com/max/1532/1*1hFiTf2WxqFoDdtec4A8wA.png"></p><p>创建一个名为<code>src</code>的文件夹并添加两个脚本：<code>index.js</code> 和 <code>utils.js</code>。你还需要在根文件夹（client 文件夹）下面创建<code>index.html</code>文件，并在其中添加如下代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Dapp Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Dapp Demo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;input&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;node_modules/web3/dist/web3.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;src/utils.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;src/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>5.2 获取 web3 实例</strong></p><p>一旦将 web3.js 作为项目中的依赖。你需要做的是使用 provider 实例去实例化 web3 对象，以便于享受 web3 提供的一切。在这个例子中，我们尝试使用 RPC 服务地址与 ganache 连接</p><p>打开 utils.js 文件并创建一个<code>getWeb3()</code>方法，该方法将从 ganache RPC 服务地址创建一个 web3js 实例。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> getWeb3 = <span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-keyword">async</span> () =&gt; &#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">const</span> web3 = <span class="hljs-keyword">new</span> Web3(<span class="hljs-string">&#x27;http://127.0.0.1:7545&#x27;</span>);<br>resolve(web3);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>reject(error);<br>&#125;<br>&#125;);<br>&#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>为了创建一个 contract 实例，我们需要 contract ABI 及其地址。如果你查看了 build 目录下的 artifacts。你会发现一个名为<code>Greeting.json</code>的文件。如果你打开它，你会发现很多关于合约的信息，包含合约名、ABI 等。</p><p>在<code>client</code>文件夹下创建一个名为<code>contracts</code>的新文件夹，并复制粘贴<code>Greeting.json</code>文件。</p><p>首先，我们使用 web3.eth.net.getId()获取 Ganache 连接到的网络 ID。然后，使用返回的 ID 从<code>Greeting.json文件</code>获取合约地址，该文件还为我们提供了合约 ABI，并使用 web3.eth.Contract 创建一个合约的实例。</p><p>在 utils.js 文件中创建一个<code>getContract()</code>方法，并在其中添加如下代码。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> getContract = <span class="hljs-keyword">async</span> web3 =&gt; &#123;<br><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> $.getJSON(<span class="hljs-string">&#x27;./contracts/Greeting.json&#x27;</span>);<br><span class="hljs-keyword">const</span> netId = <span class="hljs-keyword">await</span> web3.eth.net.getId();<br><span class="hljs-keyword">const</span> deployedNetwork = data.networks[netId];<br><span class="hljs-keyword">const</span> greeting = <span class="hljs-keyword">new</span> web3.eth.Contract(data.abi, deployedNetwork &amp;&amp; deployedNetwork.address);<br><span class="hljs-keyword">return</span> greeting;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>5.4 与智能合约交互</strong></p><p>一旦我们创建了一个合约的实例，我们可以开始使用<code>myContract.methods.myMethod([arguments])</code>调用他的方法，如<a href="https://web3js.readthedocs.io/en/v1.3.0/web3-eth-contract.html#id26">文档</a>所属。</p><p>如果调用的函数是纯函数（pure）或只读函数，则需要使用:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">myContract.methods.myMethod([<span class="hljs-built_in">arguments</span>]).call();<br></code></pre></td></tr></table></figure><p>如果调用的函数需要修改状态，则需要使用:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jsx">myContract.methods.myMethod([<span class="hljs-built_in">arguments</span>]).send();<br></code></pre></td></tr></table></figure><p>最后，在<code>index.j</code>s 文件中添加如下内容：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> displayGreeting = <span class="hljs-keyword">async</span> (greeting, contract) =&gt; &#123;<br>greeting = <span class="hljs-keyword">await</span> contract.methods.sayHello().call();<br>$(<span class="hljs-string">&#x27;h2&#x27;</span>).html(greeting);<br>&#125;;<br><span class="hljs-keyword">const</span> updateGreeting = <span class="hljs-function">(<span class="hljs-params">greeting, contract, accounts</span>) =&gt;</span> &#123;<br><span class="hljs-keyword">let</span> input;<br>$(<span class="hljs-string">&#x27;#input&#x27;</span>).on(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>input = e.target.value;<br>&#125;);<br>$(<span class="hljs-string">&#x27;#form&#x27;</span>).on(<span class="hljs-string">&#x27;submit&#x27;</span>, <span class="hljs-keyword">async</span> e =&gt; &#123;<br>e.preventDefault();<br><span class="hljs-keyword">await</span> contract.methods.updateGreeting(input).send(&#123; <span class="hljs-attr">from</span>: accounts[<span class="hljs-number">0</span>], <span class="hljs-attr">gas</span>: <span class="hljs-number">40000</span> &#125;);<br>displayGreeting(greeting, contract);<br>&#125;);<br>&#125;;<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greetingApp</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">const</span> web3 = <span class="hljs-keyword">await</span> getWeb3();<br><span class="hljs-keyword">const</span> accounts = <span class="hljs-keyword">await</span> web3.eth.getAccounts();<br><span class="hljs-keyword">const</span> contract = <span class="hljs-keyword">await</span> getContract(web3);<br><span class="hljs-keyword">let</span> greeting;<br>displayGreeting(greeting, contract);<br>updateGreeting(greeting, contract, accounts);<br>&#125;<br>greetingApp();<br></code></pre></td></tr></table></figure><p>最终项目结构如下所示,</p><p><img src="https://miro.medium.com/max/1400/1*74lrT8qdVRSwaU7hMLvX-A.png" alt="https://miro.medium.com/max/1400/1*74lrT8qdVRSwaU7hMLvX-A.png"></p><p><strong>5.5 运行 app</strong></p><p>开发工作已经完成。现在，我们在 package.json 文件中添加启动脚本后可以运行此项目。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br><span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified \&quot; &amp;&amp; exit 1&quot;</span>,<br><span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;lite-server&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用下面命令运行这个项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm start<br></code></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/1400/1*z-xi4qOQgmPvTc3kenN-Ww.png" alt="https://miro.medium.com/max/1400/1*z-xi4qOQgmPvTc3kenN-Ww.png"></p><p><img src="https://miro.medium.com/max/610/1*Fe09Ux2ukihPkn7e8824eg.png" alt="https://miro.medium.com/max/610/1*Fe09Ux2ukihPkn7e8824eg.png"></p><p><img src="https://miro.medium.com/max/608/1*eazlchwgFb1ehShst8T5HA.png" alt="https://miro.medium.com/max/608/1*eazlchwgFb1ehShst8T5HA.png"></p><p><img src="https://miro.medium.com/max/604/1*QgErQWK44r_4bOAOJtgMRQ.png" alt="https://miro.medium.com/max/604/1*QgErQWK44r_4bOAOJtgMRQ.png"></p><p>就这样， 你自己有 Web3js 的 Dapp。</p><p>感谢阅读全文。</p><p>如果你喜欢这篇文章，欢迎点赞打赏！</p><p>完整代码在<a href="https://github.com/codemaker2015/dapp-web3js-demo">https://github.com/codemaker2015/dapp-web3js-demo</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>web3</tag>
      
      <tag>Dapp</tag>
      
      <tag>Blockchain</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OS X 下修改 Google Chrome 显示语言的方法</title>
    <link href="/2023/01/17/chrome-language-update/"/>
    <url>/2023/01/17/chrome-language-update/</url>
    
    <content type="html"><![CDATA[<h1 id="Mac-OS-X-下修改-Google-Chrome-显示语言的方法"><a href="#Mac-OS-X-下修改-Google-Chrome-显示语言的方法" class="headerlink" title="Mac OS X 下修改 Google Chrome 显示语言的方法"></a>Mac OS X 下修改 Google Chrome 显示语言的方法</h1><p><a href="https://www.jianshu.com/p/e2c7fe2330fc?utm_source=pocket_saves">https://www.jianshu.com/p/e2c7fe2330fc?utm_source=pocket_saves</a></p><p>在终端运行以下命令后重启 Chrome 即可更改。</p><p>简体中文：</p><blockquote><p>defaults write com.google.Chrome AppleLanguages ‘(zh-CN)’</p></blockquote><p>英文:</p><blockquote><p>defaults write com.google.Chrome AppleLanguages ‘(en-US)’</p></blockquote><p>英文优先，简体中文第二。反之改一下顺序:</p><blockquote><p>defaults write com.google.Chrome AppleLanguages “(en-US,zh-CN)”</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>chrome</tag>
      
      <tag>Mac os X</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建前端监控，如何采集异常数据？(转)</title>
    <link href="/2023/01/17/frontend-error-catch/"/>
    <url>/2023/01/17/frontend-error-catch/</url>
    
    <content type="html"><![CDATA[<h1 id="搭建前端监控，如何采集异常数据？"><a href="#搭建前端监控，如何采集异常数据？" class="headerlink" title="搭建前端监控，如何采集异常数据？"></a>搭建前端监控，如何采集异常数据？</h1><p><a href="https://segmentfault.com/a/1190000041962607">https://segmentfault.com/a/1190000041962607</a></p><p>前两篇，我们介绍了为什么前端应该有监控系统，以及搭建前端监控的总体步骤，前端监控的 Why 和 What 想必你已经明白了。接下来我们解决 How 如何实现的问题。</p><p>如果不了解前端监控，建议先看前两篇：</p><p>本篇我们介绍，前端如何采集数据，先从收集异常数据开始。</p><h2 id="什么是异常数据？"><a href="#什么是异常数据？" class="headerlink" title="什么是异常数据？"></a>什么是异常数据？</h2><p>异常数据，是指前端在操作页面的过程中，触发的执行异常或加载异常，此时浏览器会抛出来报错信息。</p><p>比如说你的前端代码用了个未声明的变量，此时控制台会打印出红色错误，告诉你报错原因。或者是接口请求出错了，在网络面板内也能查到异常情况，是请求发送的异常，还是接口响应的异常。</p><p>在我们实际的开发场景中，前端捕获的异常主要是分两个大类，<code>接口异常</code> 和 <code>前端异常</code>，我们分别看下这两大类异常怎么捕获。</p><h2 id="接口异常"><a href="#接口异常" class="headerlink" title="接口异常"></a>接口异常</h2><p>接口异常一定是在请求的时候触发。前端目前大部分的请求是用 <code>axios</code> 发起的，所以只要获取 axios 可能发生的异常即可。</p><p>如果你用 Promise 的写法，则用 <code>.catch</code> 捕获：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">axios<br>  .post(<span class="hljs-string">&#x27;/test&#x27;</span>)<br>  .<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-params">(res)</span> =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125;)<br>  .<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> &#123;<br>    <span class="hljs-regexp">//</span> err 就是捕获到的错误对象<br>    handleError(err);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>如果你用 async/await 的写法，则用 <code>try..catch..</code> 捕获：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">&#x27;/test&#x27;</span>);<br>    <span class="hljs-built_in">console</span>.log(res);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-comment">// err 就是捕获到的错误对象</span><br>    handleError(err);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>当捕获到异常之后，统一交给 <code>handleError</code> 函数处理，这个函数会将接收到的异常进行处理，并调用 <code>上报接口</code> 将异常数据传到服务器，从而完成采集。</p><p>上面我们写的异常捕获，逻辑上是没问题的，实操起来就会发现第一道坎：<strong>页面这么多，难道每个请求都要包一层 catch 吗？</strong></p><p>是啊，如果我们是新开发一个项目，在开始的时候就规定每个请求要包一层 catch 也无可厚非，但是如果是在一个已有的规模还不小的项目中接入前端监控，这时候在每个页面或每个请求 catch 显然是不现实的。</p><p>所以，为了最大程度的降低接入成本，减少侵入性，我们是用第二种方案：<strong>在 axios 拦截器中捕获异常</strong>。</p><p>前端项目，为了统一处理请求，比如 401 的跳转，或者全局错误提示，都会在全局写一个 axios 实例，为这个实例添加拦截器，然后在其他页面中直接倒入这个实例使用，比如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 全局请求：src<span class="hljs-regexp">/request/</span>axios.js<br><br>const instance = axios.create(&#123;<br>  baseURL: <span class="hljs-string">&#x27;https://api.test.com&#x27;</span><br>  timeout: <span class="hljs-number">15000</span>,<br>  headers: &#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span>,<br>  &#125;,<br>&#125;)<br><br>export default instance<br></code></pre></td></tr></table></figure><p>然后在具体的页面中这样发起请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// a 页面：src/page/a.jsx</span><br><span class="hljs-keyword">import</span> http <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/src/request/axios.js&#x27;</span>;<br><br><span class="hljs-keyword">async</span> () =&gt; &#123;<br>  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> http.post(<span class="hljs-string">&#x27;/test&#x27;</span>);<br>  <span class="hljs-built_in">console</span>.log(res);<br>&#125;;<br></code></pre></td></tr></table></figure><p>这样的话，我们发现每个页面的请求都会走全局 axios 实例，所以我们只需要在全局请求的位置捕获异常即可，就不需要在每个页面捕获了，这样接入成本会大大降低。</p><p>按照这个方案，结下来我们在 <code>src/request/axios.js</code> 这个文件中动手实施。</p><h3 id="拦截器中捕获异常"><a href="#拦截器中捕获异常" class="headerlink" title="拦截器中捕获异常"></a>拦截器中捕获异常</h3><p>首先我们为 axios 添加响应拦截器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 响应拦截器</span><br>instance.interceptors.response.use(<br>  (response) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> response.data;<br>  &#125;,<br>  (error) =&gt; &#123;<br>    <span class="hljs-comment">// 发生异常会走到这里</span><br>    <span class="hljs-keyword">if</span> (error.response) &#123;<br>      <span class="hljs-keyword">let</span> response = error.response;<br>      <span class="hljs-keyword">if</span> (response.status &gt;= <span class="hljs-number">400</span>) &#123;<br>        handleError(response);<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      handleError(<span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">Promise</span>.reject(error);<br>  &#125;,<br>);<br></code></pre></td></tr></table></figure><p>响应拦截器的第二个参数是在发生错误时执行的函数，参数就是异常。我们首先要判断是否存在 <code>error.response</code>，存在就说明接口有响应，也就是接口通了，但是返回错误；不存在则说明接口没通，请求一直挂起，多数是接口崩溃了。</p><p>如果有响应，首先获取状态码，根据状态码来判断什么时候需要收集异常。上面的判断方式简单粗暴，只要状态码大于 400 就视为一个异常，拿到响应数据，并执行上报逻辑。</p><p>如果没有响应，可以看作是接口超时异常，调用异常处理函数时传一个 <code>null</code> 即可。</p><h2 id="前端异常"><a href="#前端异常" class="headerlink" title="前端异常"></a>前端异常</h2><p>上面我们介绍了在 axios 拦截器中如何捕获接口异常，这部分我们再介绍如何捕获前端异常。</p><p>前端代码捕获异常，最常用的方式就是用 try..catch.. 了，任意同步代码块都可以放到 <code>try</code> 块中，只要发生异常就会执行 catch：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-comment">// 任意同步代码</span><br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>  <span class="hljs-built_in">console</span>.log(err);<br>&#125;<br></code></pre></td></tr></table></figure><p>上面说“任意同步代码”而不是“任意代码”，主要是普通的 Promise 写法 try..catch.. 是捕获不到的，只能用 <code>.catch()</code> 捕获，如：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-built_in">Promise</span>.reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;出错了&#x27;</span>)).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-params">(err)</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;1：&#x27;</span>, err));<br>&#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;2：&#x27;</span>, err);<br>&#125;<br></code></pre></td></tr></table></figure><p>把这段代码丢进浏览器，打印结果是：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>： <span class="hljs-keyword">Error</span>: 出错了<br></code></pre></td></tr></table></figure><p>很明显只是 .catch 捕获到了异常。不过与上面接口异常的逻辑一样，这种方式处理当前页面异常没什么问题，但从整个应用来看，这样捕获异常侵入性强，接入成本高，所以我们的思路依然是全局捕获。</p><p>全局捕获 js 的异常也比较简单，用 <code>window.addEventLinstener(&#39;error&#39;)</code> 即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// js 错误捕获</span><br><span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// error 就是js的异常</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="为啥不用-window-onerror-？"><a href="#为啥不用-window-onerror-？" class="headerlink" title="为啥不用 window.onerror ？"></a>为啥不用 window.onerror ？</h3><p>这里很多小伙伴有疑问，为什么不用 <code>window.onerror</code> 全局监听呢？<code>window.addEventLinstener(&#39;error&#39;)</code> 和 <code>window.onerror</code> 有什么区别呢？</p><p>首先这两个函数功能基本一致，都可以全局捕获 js 异常。但是有一类异常叫做 <code>资源加载异常</code>，就是在代码中引用了不存在的图片，js，css 等静态资源导致的异常，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> loadCss = <span class="hljs-function">()=&gt;</span> &#123;<br>  <span class="hljs-keyword">let</span> link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;link&#x27;</span>)<br>  link.type = <span class="hljs-string">&#x27;text/css&#x27;</span><br>  link.rel = <span class="hljs-string">&#x27;stylesheet&#x27;</span><br>  link.href = <span class="hljs-string">&#x27;https://baidu.com/15.css&#x27;</span><br>  <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">10</span>].append(link)<br>&#125;<br><span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">return</span> &lt;div&gt;<br>    &lt;img src=<span class="hljs-string">&#x27;./bbb.png&#x27;</span>/&gt;<br>    &lt;button onClick=&#123;loadCss&#125;&gt;加载样式&lt;button/&gt;<br>  &lt;/div&gt;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中的 <code>baidu.com/15.css</code> 和 <code>bbb.png</code> 是不存在的，JS 执行到这里肯定会报一个资源找不到的错误。但是默认情况下，上面两种 window 对象上的全局监听函数都监听不到这类异常。</p><p>因为资源加载的异常只会在当前元素触发，异常不会冒泡到 window，因此监听 window 上的异常是捕捉不到的。那怎么办呢？</p><p>如果你熟悉 DOM 事件你就会明白，既然冒泡阶段监听不到，那么在捕获阶段一定能监听到。</p><p>方法就是给 <code>window.addEventListene</code> 函数指定第三个参数，很简单就是 <code>true</code>，表示该监听函数会在捕获阶段执行，这样就能监听到资源加载异常了。</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 捕获阶段全局监听</span><br>window.addEventListene(<br>  <span class="hljs-string">&#x27;error&#x27;</span>,<br>  (<span class="hljs-keyword">error</span>) =&gt; &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">error</span>.<span class="hljs-keyword">target</span> != window) &#123;<br>      console.log(<span class="hljs-keyword">error</span>.<span class="hljs-keyword">target</span>.tagName, <span class="hljs-keyword">error</span>.<span class="hljs-keyword">target</span>.src);<br>    &#125;<br>    handleError(<span class="hljs-keyword">error</span>);<br>  &#125;,<br>  <span class="hljs-keyword">true</span>,<br>);<br></code></pre></td></tr></table></figure><p>上述方式可以很轻松的监听到图片加载异常，这就是为什么更推荐 <code>window.addEventListene</code> 的原因。不过要记得，第三个参数设为 <code>true</code>，监听事件捕获，就可以全局捕获到 JS 异常和资源加载异常。</p><p>需要特别注意，<code>window.addEventListene</code> 同样不能捕获 Promise 异常。不管是 <code>Promise.then()</code> 写法还是 <code>async/await</code> 写法，发生异常时都不能捕获。</p><p>因此，我们还需要全局监听一个 <code>unhandledrejection</code> 函数来捕获未处理的 Promise 异常。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-comment">// promise 错误捕获</span><br><span class="hljs-keyword">window</span>.addEventListener(<span class="hljs-string">&#x27;unhandledrejection&#x27;</span>, (<span class="hljs-keyword">error</span>) =&gt; &#123;<br>  <span class="hljs-comment">// 打印异常原因</span><br>  console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">error</span>.reason);<br>  handleError(<span class="hljs-keyword">error</span>);<br>  <span class="hljs-comment">// 阻止控制台打印</span><br>  <span class="hljs-keyword">error</span>.preventDefault();<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>unhandledrejection</code> 事件会在 Promise 发生异常并且没有指定 <code>catch</code> 的时候触发，相当于一个全局的 Promise 异常兜底方案。这个函数会捕捉到运行时意外发生的 Promise 异常，这对我们排错非常有用。</p><p>默认情况下，Promise 发生异常且未被 catch 时，会在控制台打印异常。如果我们想阻止异常打印，可以用上面的 <code>error.preventDefault()</code> 方法。</p><h2 id="异常处理函数"><a href="#异常处理函数" class="headerlink" title="异常处理函数"></a>异常处理函数</h2><p>前面我们在捕获到异常时调用了一个异常处理函数 <code>handleError</code>，所有的异常和上报逻辑统一在这个函数内处理，接下来我们实现这个函数。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">const handleError = (error: any, <span class="hljs-class"><span class="hljs-keyword">type</span>: 1 | 2) &#123;</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-class"><span class="hljs-keyword">type</span> </span>== <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 处理接口异常</span><br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-class"><span class="hljs-keyword">type</span> </span>== <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-comment">// 处理前端异常</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了区分异常类型，函数新加了第二个参数 type 表示当前异常属于前端还是接口。在不同的场景中使用如下：</p><ul><li>处理前端异常：<code>handleError(error, 1)</code></li><li>处理接口异常：<code>handleError(error, 2)</code></li></ul><h3 id="处理接口异常"><a href="#处理接口异常" class="headerlink" title="处理接口异常"></a>处理接口异常</h3><p>处理接口异常，我们需要将拿到的 error 参数解析，然后取到需要的数据。接口异常一般需要的数据字段如下：</p><ul><li><code>code</code>：http 状态码</li><li><code>url</code>：接口请求地址</li><li><code>method</code>：接口请求方法</li><li><code>params</code>：接口请求参数</li><li><code>error</code>：接口报错信息</li></ul><p>这些字段都可以在 error 参数中获取，方法如下：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs lasso">const handleError = (error: any, <span class="hljs-keyword">type</span>: <span class="hljs-number">1</span> | <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">type</span> == <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-comment">// 此时的 error 响应，它的 config 字段中包含请求信息</span><br>    <span class="hljs-keyword">let</span> &#123; url, method, <span class="hljs-keyword">params</span>, <span class="hljs-built_in">data</span> &#125; = error.config<br>    <span class="hljs-keyword">let</span> err_data = &#123;<br>       url, method,<br>       <span class="hljs-keyword">params</span>: &#123; query: <span class="hljs-keyword">params</span>, body: <span class="hljs-built_in">data</span> &#125;,<br>       error: error.<span class="hljs-built_in">data</span>?.message || JSON.stringify(error.<span class="hljs-built_in">data</span>),<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>config 对象中的 <code>params</code> 表示 GET 请求的 query 参数，<code>data</code> 表示 POST 请求的 body 参数，所以我在处理参数的时候，将这两个参数合并为一个，用一个属性 params 来表示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">params</span>: &#123; <span class="hljs-attribute">query</span>: params, body: data &#125;<br></code></pre></td></tr></table></figure><p>还有一个 <code>error</code> 属性表示错误信息，这个获取方式要根据你的接口返回格式来拿。要避免获取到接口可能返回的超长错误信息，多半是接口没处理，这样可能会导致写入数据失败，要提前与后台规定好。</p><h3 id="处理前端异常"><a href="#处理前端异常" class="headerlink" title="处理前端异常"></a>处理前端异常</h3><p>前端异常异常大多数就是 js 异常，异常对应到 js 的 <code>Error</code> 对象，在处理之前，我们先看 Error 有哪几种类型：</p><ul><li><code>ReferenceError</code>：引用错误</li><li><code>RangeError</code>：超出有效范围</li><li><code>TypeError</code>：类型错误</li><li><code>URIError</code>：URI 解析错误</li></ul><p>这几类异常的引用对象都是 <code>Error</code>，因此可以这样获取：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs gauss">const handleError = (<span class="hljs-built_in">error</span>: any, <span class="hljs-built_in">type</span>: <span class="hljs-number">1</span> | <span class="hljs-number">2</span>) &#123;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">type</span> == <span class="hljs-number">2</span>) &#123;<br>    <span class="hljs-keyword">let</span> err_data = <span class="hljs-built_in">null</span><br>    <span class="hljs-comment">// 监测 error 是否是标准类型</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">error</span> instanceof <span class="hljs-built_in">Error</span>) &#123;<br>      <span class="hljs-keyword">let</span> &#123; name, message &#125; = <span class="hljs-built_in">error</span><br>      err_data = &#123;<br>        <span class="hljs-built_in">type</span>: name,<br>        <span class="hljs-built_in">error</span>: message<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      err_data = &#123;<br>        <span class="hljs-built_in">type</span>: &#x27;other&#x27;,<br>        <span class="hljs-built_in">error</span>: JSON.strigify(<span class="hljs-built_in">error</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述判断中，首先判断异常是否是 <code>Error</code> 的实例。事实上绝大部分的代码异常都是标准的 JS Error，但我们这里还是判断一下，如果是的话直接获取异常类型和异常信息，不是的话将异常类型设置为 <code>other</code> 即可。</p><p>我们随便写一个异常代码，看一下捕获的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.aaa(<span class="hljs-string">&#x27;ccc&#x27;</span>);<br>&#125;<br>test();<br></code></pre></td></tr></table></figure><p>然后捕获到的异常是这样的：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">const</span> handleError = <span class="hljs-function">(<span class="hljs-params">error: <span class="hljs-built_in">any</span></span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (error <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Error</span>) &#123;<br>    <span class="hljs-keyword">let</span> &#123; name, message &#125; = error;<br>    <span class="hljs-built_in">console</span>.log(name, message);<br>    <span class="hljs-comment">// 打印结果：TypeError console.aaa is not a function</span><br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="获取环境数据"><a href="#获取环境数据" class="headerlink" title="获取环境数据"></a>获取环境数据</h2><p>获取环境数据的意思是，不管是接口异常还是前端异常，除了异常本身的数据之外，我们还需要一些其他信息来帮助我们更快更准的定位到哪里出错了。</p><p>这类数据我们称之为 “环境数据”，就是触发异常时所在的环境。比如是谁在哪个页面的哪个地方触发的错误，有了这些，我们就能马上找到错误来源，再根据异常信息解决错误。</p><p>环境数据至少包括下面这些：</p><ul><li><code>app</code>：应用的名称/标识</li><li><code>env</code>：应用环境，一般是开发，测试，生产</li><li><code>version</code>：应用的版本号</li><li><code>user_id</code>：触发异常的用户 ID</li><li><code>user_name</code>：触发异常的用户名</li><li><code>page_route</code>：异常的页面路由</li><li><code>page_title</code>：异常的页面名称</li></ul><p><code>app</code> 和 <code>version</code> 都是应用配置，可以判断异常出现在哪个应用的哪个版本。这两个字段我建议直接获取 <code>package.json</code> 下的 <code>name</code> 和 <code>version</code> 属性，在应用升级的时候，及时修改 version 版本号即可。</p><p>其余的字段，需要根据框架的配置获取，下面我分别介绍在 Vue 和 React 中如何获取。</p><h3 id="在-Vue-中"><a href="#在-Vue-中" class="headerlink" title="在 Vue 中"></a>在 Vue 中</h3><p>在 Vue 中获取用户信息一般都是直接从 Vuex 里面拿，如果你的用户信息没有存到 Vuex 里，从 localStorage 里获取也是一样的。</p><p>如果在 Vuex 里，可以这样实现：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span>; <span class="hljs-comment">// vuex 导出目录</span><br><span class="hljs-keyword">let</span> user_info = store.state;<br><span class="hljs-keyword">let</span> user_id = user_info.id;<br><span class="hljs-keyword">let</span> user_name = user_info.name;<br></code></pre></td></tr></table></figure><p>用户信息存在状态管理中，页面路由信息一般是在 <code>vue-router</code> 中定义。前端的路由地址可以直接从 vue-router 中获取，页面名称可以配置在 <code>meta</code> 中，如：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">&#123;<br>  path: <span class="hljs-string">&#x27;/test&#x27;</span>,<br>  name: <span class="hljs-string">&#x27;test&#x27;</span>,<br>  meta: &#123;<br>    title: <span class="hljs-string">&#x27;测试页面&#x27;</span><br>  &#125;,<br>  component: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;@/views/test/Index.vue&#x27;</span>)<br>&#125;,<br></code></pre></td></tr></table></figure><p>这样配置之后，获取当前页面路由和页面名称就简单了：</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nim">window.vm = new <span class="hljs-type">Vue</span>(<span class="hljs-meta">&#123;...&#125;</span>)<br><br><span class="hljs-keyword">let</span> route = vm.$route<br><span class="hljs-keyword">let</span> page_route = route.path<br><span class="hljs-keyword">let</span> page_title = route.meta.title<br></code></pre></td></tr></table></figure><p>最后一步，我们再获取当前环境。当前环境用一个环境变量 <code>VUE_APP_ENV</code> 表示，有三个值：</p><ul><li><code>dev</code>：开发环境</li><li><code>test</code>：测试环境</li><li><code>pro</code>：生产环境</li></ul><p>然后在根目录下新建三个环境文件，写入环境变量：</p><ul><li><code>.env.development</code>：VUE_APP_ENV=dev</li><li><code>.env.staging</code>：VUE_APP_ENV=test</li><li><code>.env.production</code>：VUE_APP_ENV=pro</li></ul><p>现在获取 <code>env</code> 环境时就可以这么获取：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  <span class="hljs-attribute">env</span>: process.env.VUE_APP_ENV;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后一步，执行打包时，传入模式以匹配对应的环境文件：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment"># 测试环境打包</span><br>$ num <span class="hljs-built_in">run</span> build <span class="hljs-comment">--mode staging</span><br><span class="hljs-comment"># 生产环境打包</span><br>$ num <span class="hljs-built_in">run</span> build <span class="hljs-comment">--mode production</span><br></code></pre></td></tr></table></figure><p>获取到环境数据，再拼上异常数据，我们就准备好了数据等待上报了。</p><h3 id="在-React-中"><a href="#在-React-中" class="headerlink" title="在 React 中"></a>在 React 中</h3><p>和 Vue 一样，用户信息可以直接从状态管理里拿。因为 React 中没有全局获取当前旅游的快捷方式，所以页面信息我也会放在状态管理里面。我用的状态管理是 Mobx，获取方式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">import &#123; TestStore &#125; from <span class="hljs-string">&#x27;@/stores&#x27;</span>; <span class="hljs-regexp">//</span> mobx 导出目录<br>let &#123; user_info, cur_path, cur_page_title &#125; = TestStore;<br><span class="hljs-regexp">//</span> 用户信息：user_info<br><span class="hljs-regexp">//</span> 页面信息：cur_path，cur_page_title<br></code></pre></td></tr></table></figure><p>这样的话，就需要在每次切换页面时，更新 mobx 里的路由信息，怎么做呢？</p><p>其实在根路由页（一般是首页）的 <code>useEffect</code> 中监听即可：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> &#123; useLocation &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; observer, useLocalObservable &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;mobx-react&#x27;</span>;<br><span class="hljs-keyword">import</span> &#123; TestStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/stores&#x27;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> observer(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  const &#123; pathname, search &#125; = useLocation();<br>  const test_inst = useLocalObservable(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> TestStore);<br>  useEffect(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>    test_inst.setCurPath(pathname, search);<br>  &#125;, [pathname]);<br>&#125;);<br></code></pre></td></tr></table></figure><p>获取到用户信息和页面信息，接下来就是当前环境了。和 Vue 一样通过 <code>--mode</code> 来指定模式，并加载相应的环境变量，只不过设置方法略有不同。大多数的 React 项目可能都是用 <code>create-react-app</code> 创建的，我们以此为例介绍怎么修改。</p><p>首先，打开 <code>scripts/start.js</code> 文件，这是执行 npm run start 时执行的文件，我们在开头部分第 6 行加代码：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">process.env.REACT_APP_ENV</span> = <span class="hljs-string">&#x27;dev&#x27;</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>没错，我们指定的环境变量就是 <code>REACT_APP_ENV</code>，因为只有 <code>REACT_</code> 开头的环境变量可被读取。</p><p>然后再修改 <code>scripts/build.js</code> 文件的第 48 行，修改后如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (argv.length &gt;= <span class="hljs-number">2</span> &amp;&amp; argv[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;--mode&#x27;</span>) &#123;<br>  <span class="hljs-keyword">switch</span> (argv[<span class="hljs-number">1</span>]) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;staging&#x27;</span>:<br>      process.env.REACT_APP_ENV = <span class="hljs-string">&#x27;test&#x27;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;production&#x27;</span>:<br>      process.env.REACT_APP_ENV = <span class="hljs-string">&#x27;pro&#x27;</span>;<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时获取 <code>env</code> 环境时就可以这么获取：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123;<br>  <span class="hljs-attribute">env</span>: process.env.REACT_APP_ENV;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>经过前面一系列操作，我们已经比较全面的获取到了异常数据，以及发生异常时到环境数据，接下来就是调用上报接口，将这些数据传给后台存起来，我们以后查找和追踪就很方便了。</p><p>如果你也需要前端监控，不妨花上半个小时，按照文中介绍的方法收集一下异常数据，相信对你很有帮助。</p><p>文章首发公众号 <a href="https://link.segmentfault.com/?enc=bfuiXamZT3K+uApy11Tlzw==.SGM5hP8Cp0ls5CLII189MyrA7Hbq7dlGUnc0iZrRjieiLhCoTdqM/u20r9KSZand">程序员成功</a>。这个公众号只做原创，专注于前端工程与架构的分享，关注我查看更多硬核知识。我还有一个前端工程与架构群，如果有兴趣，可加我 <a href="https://link.segmentfault.com/?enc=6Bvgk5wZYKWqPt0hD2oLiQ==.WjX6L7lrLamnI+jD+1fgjLzn8chDv6RD9+/FDpQ23a6920l46uE3xBAFZdb1Iq53">微信</a> 入群。</p>]]></content>
    
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>vue</tag>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML Tips (转)</title>
    <link href="/2023/01/17/html-tips/"/>
    <url>/2023/01/17/html-tips/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML-Tips-Marko-Denic-Web-Developer"><a href="#HTML-Tips-Marko-Denic-Web-Developer" class="headerlink" title="HTML Tips - Marko Denic - Web Developer"></a>HTML Tips - Marko Denic - Web Developer</h1><p><a href="https://markodenic.com/html-tips/?continueFlag=2f26a57d963372388f360a59d96a9b25&utm_source=pocket_saves">https://markodenic.com/html-tips/?continueFlag=2f26a57d963372388f360a59d96a9b25&amp;utm_source=pocket_saves</a></p><p><img src="/img/html-1-e1613893702690.png" alt="/img/html-1-e1613893702690.png"></p><ol><li><blockquote><p>In this article, I will share with you some very useful HTML tips. Enjoy!</p></blockquote><ul><li><em>Post will be updated regularly with new tips!</em></li></ul></li></ol><h2 id="But-first-what-is-HTML"><a href="#But-first-what-is-HTML" class="headerlink" title="But first, what is HTML?"></a>But first, what is HTML?</h2><p>Hypertext Markup Language (HTML) is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript.</p><h3 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start!"></a>Let’s start!</h3><h3 id="1-The-loading-lazy-attribute"><a href="#1-The-loading-lazy-attribute" class="headerlink" title="1. The loading=lazy attribute"></a>1. The <code>loading=lazy</code> attribute</h3><p>Performance tip. You can use the <code>loading=lazy</code> attribute to defer the loading of the image until the user scrolls to them.</p><h3 id="2-Email-call-and-SMS-links"><a href="#2-Email-call-and-SMS-links" class="headerlink" title="2. Email, call, and SMS links:"></a>2. Email, call, and SMS links:</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dust"><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;mailto:</span></span></span><span class="hljs-template-variable">&#123;email&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">?subject=</span></span></span><span class="hljs-template-variable">&#123;subject&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&amp;body=</span></span></span><span class="hljs-template-variable">&#123;content&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">  Send us an email</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;tel:</span></span></span><span class="hljs-template-variable">&#123;phone&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">  Call us</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;sms:</span></span></span><span class="hljs-template-variable">&#123;phone&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">?body=</span></span></span><span class="hljs-template-variable">&#123;content&#125;</span><span class="xml"><span class="hljs-tag"><span class="hljs-string">&quot;</span>&gt;</span></span><br><span class="xml">  Send us a message</span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="3-Ordered-lists-start-attribute"><a href="#3-Ordered-lists-start-attribute" class="headerlink" title="3. Ordered lists start attribute."></a>3. Ordered lists <code>start</code> attribute.</h3><p>Use the <code>start</code> attribute to change the starting point for your ordered lists.</p><p><img src="/img/start.png" alt="img/start.png"></p><p>Start Attribute</p><h3 id="4-The-meter-element"><a href="#4-The-meter-element" class="headerlink" title="4. The meter element"></a>4. The <code>meter</code> element</h3><ol><li>You can use the <code>&lt;meter&gt;</code> element to display quantities. No JavaScript/CSS needed.</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;value1&quot;</span>&gt;Low&lt;/label&gt;<br>&lt;meter <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-attribute">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attribute">low</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attribute">high</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attribute">optimum</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;25&quot;</span>&gt;&lt;/meter&gt;<br><br>&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;value2&quot;</span>&gt;Medium&lt;/label&gt;<br>&lt;meter <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;value2&quot;</span> <span class="hljs-attribute">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attribute">low</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attribute">high</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attribute">optimum</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;50&quot;</span>&gt;&lt;/meter&gt;<br><br>&lt;label <span class="hljs-attribute">for</span>=<span class="hljs-string">&quot;value3&quot;</span>&gt;High&lt;/label&gt;<br>&lt;meter <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;value3&quot;</span> <span class="hljs-attribute">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">max</span>=<span class="hljs-string">&quot;100&quot;</span> <span class="hljs-attribute">low</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attribute">high</span>=<span class="hljs-string">&quot;75&quot;</span> <span class="hljs-attribute">optimum</span>=<span class="hljs-string">&quot;80&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;80&quot;</span>&gt;&lt;/meter&gt;<br></code></pre></td></tr></table></figure><h3 id="5-HTML-Native-Search"><a href="#5-HTML-Native-Search" class="headerlink" title="5. HTML Native Search"></a>5. HTML Native Search</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">&lt;div <span class="hljs-keyword">class</span>=&quot;<span class="hljs-symbol">wrapper</span>&quot;&gt;<br>  &lt;<span class="hljs-symbol">h1</span>&gt;<br>    <span class="hljs-symbol">Native</span> <span class="hljs-symbol">HTML</span> <span class="hljs-symbol">Search</span><br>  &lt;/<span class="hljs-symbol">h1</span>&gt;<br><br>  &lt;<span class="hljs-symbol">input</span> <span class="hljs-symbol">list</span>=&quot;<span class="hljs-symbol">items</span>&quot;&gt;<br><br>  &lt;<span class="hljs-symbol">datalist</span> <span class="hljs-symbol">id</span>=&quot;<span class="hljs-symbol">items</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">option</span> <span class="hljs-symbol">value</span>=&quot;<span class="hljs-symbol">Marko</span> <span class="hljs-symbol">Denic</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">option</span> <span class="hljs-symbol">value</span>=&quot;<span class="hljs-symbol">FreeCodeCamp</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">option</span> <span class="hljs-symbol">value</span>=&quot;<span class="hljs-symbol">FreeCodeTools</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">option</span> <span class="hljs-symbol">value</span>=&quot;<span class="hljs-symbol">Web</span> <span class="hljs-symbol">Development</span>&quot;&gt;<br>    &lt;<span class="hljs-symbol">option</span> <span class="hljs-symbol">value</span>=&quot;<span class="hljs-symbol">Web</span> <span class="hljs-symbol">Developer</span>&quot;&gt;<br>  &lt;/<span class="hljs-symbol">datalist</span>&gt;<br>&lt;/<span class="hljs-symbol">div</span>&gt;<br></code></pre></td></tr></table></figure><h3 id="6-Fieldset-Element"><a href="#6-Fieldset-Element" class="headerlink" title="6. Fieldset Element"></a>6. Fieldset Element</h3><p>You can use the <code>&lt;fieldset&gt;</code> element to group several controls as well as labels (<code>&lt;label&gt;</code>) within a web form.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>Choose your favorite language<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;javascript&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;javascript&quot;</span>&gt;</span>JavaScript<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;python&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;python&quot;</span>&gt;</span>Python<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;language&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;java&quot;</span>&gt;</span>Java<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="7-Window-opener"><a href="#7-Window-opener" class="headerlink" title="7. Window.opener"></a>7. Window.opener</h3><p>Pages opened with <code>target=&quot;_blank&quot;</code> allow the new page to access the original’s <code>window.opener</code>. This can have security and performance implications. Include <code>rel=&quot;noopener&quot;</code> or <code>rel=&quot;noreferrer&quot;</code> to prevent this.</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://markodenic.com/&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span> <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;noopener&quot;</span>&gt;<br>Marko<span class="hljs-string">&#x27;s website</span><br><span class="hljs-string">&lt;/a&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-Base-Element"><a href="#8-Base-Element" class="headerlink" title="8. Base Element"></a>8. Base Element</h3><ol><li>If you want to open all links in the document in a new tab, you can use <code>&lt;base&gt;</code> element:</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">base</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-comment">&lt;!-- This link will open in a new tab. --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;wrapper&quot;</span>&gt;</span><br>  This link will be opened in a new tab: <span class="hljs-symbol">&amp;nbsp;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://freecodetools.org/&quot;</span>&gt;</span><br>    Free Code Tools<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    Read more: <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;</span>&gt;</span><br>    MDN Documentation<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>This link will be opened in a new tab:</p><h3 id="9-Favicon-cache-busting"><a href="#9-Favicon-cache-busting" class="headerlink" title="9. Favicon cache busting"></a>9. Favicon cache busting</h3><p>To refresh your website’s favicon you can force browsers to download a new version by adding <code>?v=2</code> to the filename.</p><p>This is especially helpful in production to make sure the users get the new version.</p><h3 id="10-The-spellcheck-attribute"><a href="#10-The-spellcheck-attribute" class="headerlink" title="10. The spellcheck attribute"></a>10. The <code>spellcheck</code> attribute</h3><p>Use the <code>spellcheck</code> attribute to define whether the element may be checked for spelling errors.</p><h3 id="11-Native-HTML-sliders"><a href="#11-Native-HTML-sliders" class="headerlink" title="11. Native HTML sliders"></a>11. Native HTML sliders</h3><p>You can use <code>&lt;input type=&quot;range&quot;&gt;</code> to create sliders.</p><h3 id="12-HTML-Accordion"><a href="#12-HTML-Accordion" class="headerlink" title="12. HTML Accordion"></a>12. HTML Accordion</h3><p>You can use the <code>details</code> element to create a native HTML accordion.</p><h3 id="13-mark-tag"><a href="#13-mark-tag" class="headerlink" title="13. mark tag"></a>13. <code>mark</code> tag</h3><p>You can use the <code>&lt;mark&gt;</code> tag to highlight text.</p><h3 id="14-download-attribute"><a href="#14-download-attribute" class="headerlink" title="14. download attribute"></a>14. <code>download</code> attribute</h3><p>You can use the <code>download</code> attribute in your links to download the file instead of navigating to it.</p><h3 id="15-Performance-tip"><a href="#15-Performance-tip" class="headerlink" title="15. Performance tip"></a>15. Performance tip</h3><p>Use the <code>.webp</code> image format to make images smaller and boost the performance of your website.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">picture</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- load .webp image if supported --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">srcset</span>=<span class="hljs-string">&quot;logo.webp&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/webp&quot;</span>&gt;</span><br><br>  <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">Fallback if `.webp` images or &lt;picture&gt; tag</span><br><span class="hljs-comment">not supported by the browser.</span><br><span class="hljs-comment">  --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;logo.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;logo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">picture</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="16-Video-thumbnail"><a href="#16-Video-thumbnail" class="headerlink" title="16. Video thumbnail"></a>16. Video thumbnail</h3><p>Use the <code>poster</code> attribute to specify an image to be shown while the video is downloading, or until the user hits the play button.</p><h3 id="17-input-type-quot-search-quot"><a href="#17-input-type-quot-search-quot" class="headerlink" title="17. input type=&quot;search&quot;"></a>17. input <code>type=&quot;search&quot;</code></h3><p>Use the <code>type=&quot;search&quot;</code> for your search inputs and you get the “clear” button for free.</p><h3 id="18-pre-tag"><a href="#18-pre-tag" class="headerlink" title="18. pre tag"></a>18. <code>pre</code> tag</h3><p>Use the <code>&lt;pre&gt;</code> tag to present preformatted text exactly as written in the HTML file:</p><p>To be continued…</p>]]></content>
    
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CORS详解（转）</title>
    <link href="/2023/01/17/cors-detail/"/>
    <url>/2023/01/17/cors-detail/</url>
    
    <content type="html"><![CDATA[<h1 id="CORS-详解"><a href="#CORS-详解" class="headerlink" title="CORS 详解"></a>CORS 详解</h1><h2 id="0、关于-CORS（转）"><a href="#0、关于-CORS（转）" class="headerlink" title="0、关于 CORS（转）"></a>0、关于 CORS（转）</h2><p>说到 CORS，就不得不先了解跨站 HTTP 请求（Cross-site HTTP request）。</p><p>跨域 HTTP 请求是指发起请求的资源所在域不同于该请求所指向资源所在的域的 HTTP 请求。</p><p>正如大家所知，出于安全考虑，浏览器会限制脚本中发起的跨站请求。使用 XMLHttpRequest 发起 HTTP 请求必须遵守同源策略。 具体而言，Web 应用程序能且只能使用 XMLHttpRequest 对象向其加载的源域名发起 HTTP 请求，而不能向任何其它域名发起请求。</p><p>由于 Web 应用技术越来越丰富，我们非常渴望在不丢失安全的前提下，能够实现跨站请求。特别是现在的 Web 程序结构，一般是 HTML+REST API。在之前的实现中，我们一般采用 jsonp 来发起跨站请求，这其实是利用了 html 标签的特点。</p><p>W3C 的 Web 应用工作组推荐了一种新的机制，即跨域资源共享（Cross-Origin Resource Sharing），也就是当前我们提到的 CORS。</p><p>CORS 的核心，就是让服务器来确定是否允许跨域访问。</p><h2 id="1、典型场景"><a href="#1、典型场景" class="headerlink" title="1、典型场景"></a>1、典型场景</h2><h3 id="1-1、简单请求"><a href="#1-1、简单请求" class="headerlink" title="1.1、简单请求"></a>1.1、简单请求</h3><p>什么是简单请求？全部满足以下条件的请求可以称之为简单请求：</p><ol><li>只使用 GET、HEAD 或者 POST 请求方法。如果是 POST，则数据类型（Content-Type）只能是<code>application/x-www-form-urlencodeed</code>、<code>multipart/form-data</code>、<code>text/plain</code>中的一种。</li><li>没有使用自定义的请求头（如 x-token）</li></ol><p>按照这个规则，那我们的能实现跨域请求的情况如下：</p><p>Server 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//之后设置了Access-Control-Allow-Origin，才会允许跨域</span><br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>  res.write(<span class="hljs-string">&#x27;abc&#x27;</span>);<br>  res.end();<br>&#125;);<br><br>server.listen(<span class="hljs-number">10000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;started.&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>Client 代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var xhr = <span class="hljs-built_in">new</span> XMLHttpRequest();<br>xhr.onreadystatechange = <span class="hljs-keyword">function</span>()&#123;<br>  <span class="hljs-keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE)&#123;<br>    console.log(<span class="hljs-string">&#x27;Result：&#x27;</span>, xhr.responseText);<br>  &#125;<br>&#125;<br><br>//场景一：<span class="hljs-keyword">GET</span>请求，不需要<span class="hljs-keyword">Header</span>，允许跨域<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.send();<br><br>//场景二： POST请求，需要设置为指定<span class="hljs-keyword">Header</span>（不设置content-<span class="hljs-keyword">type</span>也可），允许跨域<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>//此处<span class="hljs-keyword">value</span>必须是<span class="hljs-type">text</span>/plain或者application/x-www-form-urlencoded或者multipart/form-data。<br>//此处也可以不设置<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;text/plain&#x27;</span>);<br>xhr.send();<br><br>//场景三：<span class="hljs-keyword">DELETE</span>请求（不允许跨域）<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;DELETE&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.send();<br><br>//场景四：POST请求，有自定义<span class="hljs-keyword">Header</span>（不允许跨域）<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;x-token&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>xhr.send();<br><br></code></pre></td></tr></table></figure><h3 id="1-2、预请求"><a href="#1-2、预请求" class="headerlink" title="1.2、预请求"></a>1.2、预请求</h3><p>不同于简单请求，预请求要求必须先发送一个 OPTIONS 请求给站点，来查明该站点是否允许跨域请求，这样做的原因是为了避免跨站请求可能对目的站点的数据造成的损坏。</p><p>如果请求满足以下任一条件，则会产生预请求：</p><ol><li>请求以 GET、HEAD、POST 之外的方法发起。或者，使用 POST，但数据类型为<code>application/x-www-form-urlencoded</code>, <code>multipart/form-data</code> 或者 <code>text/plain</code> 以外的数据类型。（注：之前的版本只有 text/plain 可以不用发起预请求）。</li><li>使用了自定义请求头。</li></ol><p>按照如上规则，我们来列举几个应用场景：</p><p>Server 端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//之后设置了Access-Control-Allow-Origin，才会允许跨域</span><br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>);<br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;POST, DELETE, GET&#x27;</span>);<br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;x-token&#x27;</span>);<br>  <span class="hljs-comment">//设置预请求缓存1天，1天内再次请求，可以跳过预请求</span><br>  <span class="hljs-comment">//此功能需要客户端缓存支持，如果客户端禁用缓存，那么每次都会预请求</span><br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>  res.write(<span class="hljs-string">&#x27;abc&#x27;</span>);<br>  res.end();<br>&#125;);<br><br>server.listen(<span class="hljs-number">10000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;started.&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>Client 端代码：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">var xhr = <span class="hljs-built_in">new</span> XMLHttpRequest();<br>xhr.onreadystatechange = <span class="hljs-keyword">function</span>()&#123;<br>  <span class="hljs-keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE)&#123;<br>    console.log(<span class="hljs-string">&#x27;Result：&#x27;</span>, xhr.responseText);<br>  &#125;<br>&#125;<br><br>//场景一：<span class="hljs-keyword">DELETE</span>请求，发送<span class="hljs-keyword">OPTIONS</span>，匹配，允许跨域<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;DELETE&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.send();<br><br>//场景二：PUT请求，发送<span class="hljs-keyword">OPTIONS</span>，不匹配，不允许跨域<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;PUT&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.send();<br><br>//场景三：<span class="hljs-keyword">DELETE</span>请求匹配，使用自定义<span class="hljs-keyword">Header</span>不匹配，不允许跨域<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;DELETE&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;x-token1&#x27;</span>, <span class="hljs-string">&#x27;aa&#x27;</span>);<br>xhr.send();<br><br>//场景四：POST请求，匹配的自定义<span class="hljs-keyword">Header</span>，允许跨域<br>xhr.<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-keyword">true</span>);<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;x-token&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>xhr.send();<br><br></code></pre></td></tr></table></figure><h3 id="1-3、带凭证的请求"><a href="#1-3、带凭证的请求" class="headerlink" title="1.3、带凭证的请求"></a>1.3、带凭证的请求</h3><p>一般来说，对于跨站请求，浏览器是不会发送凭证（HTTP Cookies 和验证信息）的。如果要发送带凭证的信息，只需要给 XMLHttpRequest 设置一个特殊的属性<code>withCredentials = true</code>，通过这种方式，浏览器就允许发送凭证信息。</p><p>带凭证的请求可能是简单请求，也可以是会有预请求。是否允许跨域，会先判断简单请求和预请求的规则，然后还会带上带凭证的请求自己的规则。</p><p>在带凭证的请求中，后端的响应必须包含 Header<code>Access-Control-Allow-Credentials=true</code>，同时 Header <code>Access-Control-Allow-Origin</code>，不能再使用*号这种匹配符。</p><p>具体示例如下：</p><p>服务端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">var</span> server = http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">//要处理带凭证的请求，此Header不能使用*。</span><br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://10.16.85.170:8000&gt;&#x27;</span>);<br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="hljs-string">&#x27;POST, DELETE, GET&#x27;</span>);<br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="hljs-string">&#x27;x-token&#x27;</span>);<br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Max-Age&#x27;</span>, <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span>);<br>  <span class="hljs-comment">//只有设置了该Header，才允许带凭证的请求。</span><br>  res.setHeader(<span class="hljs-string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="hljs-literal">true</span>);<br>  res.write(<span class="hljs-string">&#x27;abc&#x27;</span>);<br>  res.end();<br>&#125;);<br><br>server.listen(<span class="hljs-number">10000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;started.&#x27;</span>);<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>xhr.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-keyword">if</span>(xhr.readyState === XMLHttpRequest.DONE)&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;Result：&#x27;</span>, xhr.responseText);<br>  &#125;<br>&#125;<br><span class="hljs-comment">//优先满足预请求，然后满足凭证请求，允许跨域。</span><br>xhr.open(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;&lt;http://localhost:10000/&gt;&#x27;</span>, <span class="hljs-literal">true</span>);<br>xhr.withCredentials = <span class="hljs-literal">true</span>;<br>xhr.setRequestHeader(<span class="hljs-string">&#x27;x-token&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>xhr.send();<br><br></code></pre></td></tr></table></figure><h2 id="2、HTTP-响应头"><a href="#2、HTTP-响应头" class="headerlink" title="2、HTTP 响应头"></a>2、HTTP 响应头</h2><h3 id="2-1、-后端-HTTP-响应头"><a href="#2-1、-后端-HTTP-响应头" class="headerlink" title="2.1、 后端 HTTP 响应头"></a>2.1、 后端 HTTP 响应头</h3><p>此处列举后端有关 CORS 的响应头：</p><ol><li>Access-Control-Allow-Origin： <origin> | _ 允许的域名，只能有一个值。比如“_”或“<a href="http://abc.com/">abc.com</a>”，”<a href="http://a.com/">a.com</a>,<a href="http://b.com/">b.com</a>“这种不允许</li><li>Access-Control-Expose-Headers: <headers> 允许的白名单 Header，多个用逗号隔开</li><li>Access-Control-Max-Age: <delta-seconds> 预请求缓存时间，单位秒，<strong>禁用缓存</strong>时无效哦！</li><li>Access-Control-Allow-Credentials: true | false 是否允许带凭证的请求，如果为 true，则 Origin 只能是具体的值</li><li>Access-Control-Allow-Methods: <methods> 允许的请求类型，多个用逗号隔开</li><li>Access-Control-Allow-Headers: <headers> 在实际请求中，允许的自定义 header，多个用逗号隔开</li></ol><h3 id="2-2、-浏览器发出跨域请求的响应头"><a href="#2-2、-浏览器发出跨域请求的响应头" class="headerlink" title="2.2、 浏览器发出跨域请求的响应头"></a>2.2、 浏览器发出跨域请求的响应头</h3><p>此处列举出浏览器在发送跨域请求时，会带上的响应头：</p><ol><li>Origin: <origin> 告诉服务器，请求来自哪里，仅仅是服务器名，不包含路径。</li><li>Access-Control-Request-Method: <method> 预请求时，告诉服务器实际的请求方式</li><li>Access-Control-Request-Headers: <headers> 预请求时，告诉服务器，实际请求所携带的自定义 Header</li></ol><h2 id="3、参考资料"><a href="#3、参考资料" class="headerlink" title="3、参考资料"></a>3、参考资料</h2><ol><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Preflighted_requests">MDN HTTP access control (CORS)</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">MDN HTTP 访问控制(CORS)</a></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>支付宝给美国App Store充值</title>
    <link href="/2023/01/17/appstore-usa-alipay/"/>
    <url>/2023/01/17/appstore-usa-alipay/</url>
    
    <content type="html"><![CDATA[<h1 id="支付宝给美国-App-Store-充值"><a href="#支付宝给美国-App-Store-充值" class="headerlink" title="支付宝给美国 App Store 充值"></a>支付宝给美国 App Store 充值</h1><ol><li>打开支付宝，切换到美国地区（左上角选择）</li><li>搜索“出境”，选择“支付宝惠出境”</li><li>选择“折扣礼卡”，打开“折扣礼卡“页面，下拉到底部</li><li>打开”更多大牌折扣礼卡“的”点击查看“页面</li><li>搜多”App Store “， 选择”App Store &amp; iTunes US“</li><li>输入姓名，邮箱（可以不是苹果账户邮箱）用于收取兑换码</li><li>进入购买金额（$2-$500), 完成会收到兑换码（邮箱有可能无法立即收到，需要等几个、十几小时看情况）</li><li>打开 App Store，切换到美区</li><li>点击用户头像，打开账户</li><li>选择“兑换充值卡或者代码”， 选择“手动输入兑换码”</li><li>输入兑换码，点击“兑换”</li><li>OK</li></ol><ul><li>参考链接： <a href="https://www.youtube.com/watch?v=W3chc223K-w">https://www.youtube.com/watch?v=W3chc223K-w</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义Egg Logger(二)：自定义加密功能的logger</title>
    <link href="/2020/12/15/egg-custom-logger-2/"/>
    <url>/2020/12/15/egg-custom-logger-2/</url>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>我们遇到一个场景，需要对日志中的敏感字段进行脱敏操作。为了实现该需求，我们定义一个插件（egg-logger-xxx），该插件在 egg-logger 的基础上扩展了自己的 logger、transport,使用方式和 Egg 框架自带的 logger 一致。目前我们的脱敏规则是：</p><ul><li>取头尾四位，中间使用星号（<code>*</code>）代替，例如：440c*<strong><strong><strong><strong><em>\</em>*****</strong></strong></strong></strong>0245。</li><li>日志字段最大长度 255，超出部分使用省略号(<code>...</code>)</li></ul><h4 id="定义一个插件"><a href="#定义一个插件" class="headerlink" title="定义一个插件"></a>定义一个插件</h4><p>有两种方式新建插件，可以使用 Egg 框架提供的脚手架开发，或者项目中新建插件目录文件。这里我们的使用第二种方式，将插件存放在/lib/plugins/egg-logger-xxx。</p><p>插件目录结构如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs text">custom-logger-demo<br>├── app<br>├── config<br>├── lib<br>│   └── plugins<br>│       └── egg-logger-xxx<br>│           ├── config<br>│           │   └── config.default.js<br>│           ├── app<br>│           │   └── extend<br>│           │       └── context.js<br>│           ├── app.js<br>│           └── lib<br>│               ├── XxxConsoleTransport.js<br>│               ├── XxxFileBufferTransport.js<br>│               ├── XxxFileTransport.js<br>│               ├── XxxLogger.js<br>│               └── utils.js<br>├── README.md<br></code></pre></td></tr></table></figure><p>加载本地插件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// config/plugins.js</span><br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>    loggerXxx: &#123;<br>    enable: <span class="hljs-literal">true</span>,<br>    path: path.join(__dirname, <span class="hljs-string">&#x27;../lib/plugins/egg-logger-xxx&#x27;</span>),<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="添加依赖参数"><a href="#添加依赖参数" class="headerlink" title="添加依赖参数"></a>添加依赖参数</h4><p>在插件的<code>config/config.default.js</code>中添加插件依赖的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">exports</span>.loggerXxx = &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>默认使用config.logger.dir</span><br><span class="hljs-comment"> */</span><br>dir: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>默认使用config.logger.appLogName</span><br><span class="hljs-comment"> */</span><br>appLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>默认使用config.logger.coreLogName</span><br><span class="hljs-comment"> */</span><br>coreLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>默认使用config.logger.agentLogName</span><br><span class="hljs-comment"> */</span><br>agentLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>默认使用config.logger.errorLogName</span><br><span class="hljs-comment"> */</span><br>errorLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>日志文件路径，参考CustomLogger file配置。</span><br><span class="hljs-comment"> * eg: path.join(config.logger.dir, config.logger.appLogName),</span><br><span class="hljs-comment"> */</span><br>file: <span class="hljs-string">&#x27;&#x27;</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>日志输出格式化函数，参考CustomLogger formatter。</span><br><span class="hljs-comment"> * 如果为空使用默认的egg-logger/utils下defaultFormatter</span><br><span class="hljs-comment"> * defaultFormatter(meta) &#123;</span><br><span class="hljs-comment"> *   return meta.date + &#x27; &#x27; + meta.level + &#x27; &#x27; + meta.pid + &#x27; &#x27; + meta.message;</span><br><span class="hljs-comment"> * &#125;,</span><br><span class="hljs-comment"> */</span><br>formatter: <span class="hljs-literal">null</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>日志输出格式化，参考CustomLogger formatter。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>Context logger日志输出格式化行数，参考CustomLogger contextFormatter。</span><br><span class="hljs-comment"> * 如有有contextFormatter则使用contextFormatter，contextFormatter</span><br><span class="hljs-comment"> */</span><br>contextFormatter: <span class="hljs-literal">null</span>,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 需要加密的日志字段，通过正则表达式使用星号（*）替换需要加密的值，</span><br><span class="hljs-comment"> * 默认规则是取头4位，尾4位，中间替换星号（*）</span><br><span class="hljs-comment"> * 字符串格式，eg: ： [&quot;loginId&quot;, &quot;passWord&quot; ],</span><br><span class="hljs-comment"> * 对象格式，regx表示需要替换加密字段的正则表达式，</span><br><span class="hljs-comment"> * eg: [&#123; value: &#x27;loginId&#x27;, regx: /^(\w&#123;3&#125;)\w&#123;4&#125;(\w+)/ &#125;, &#123; value: &#x27;passWord&#x27;, regx: /^(\w&#123;4&#125;)\w&#123;24&#125;(\w+)/ &#125;]</span><br><span class="hljs-comment"> * 混合 eg：[&quot;loginId&quot;, &#123; value: &#x27;passWord&#x27;, regx: /^(\w&#123;4&#125;)\w&#123;24&#125;(\w+)/ &#125;]</span><br><span class="hljs-comment"> */</span><br>encryptField: [],<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>在<code>custom-logger-demo/config/config.default.js</code>中可以添加修改的配置，eg:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">config.xxxLogger = &#123;<br>file: path.join(config.logger.dir, config.logger.appLogName),<br>encryptField: [<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;loginId&#x27;</span>, <span class="hljs-attr">regx</span>: <span class="hljs-regexp">/^(\w&#123;3&#125;)\w&#123;4&#125;(\w+)/</span> &#125;,<br>&#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;passWord&#x27;</span>, <span class="hljs-attr">regx</span>: <span class="hljs-regexp">/^(\w&#123;4&#125;)\w&#123;24&#125;(\w+)/</span> &#125;,<br>],<br>&#125;;<br></code></pre></td></tr></table></figure></blockquote><h4 id="自定义-Transport"><a href="#自定义-Transport" class="headerlink" title="自定义 Transport"></a>自定义 Transport</h4><p>依据需求自定义修改的 transport, XxxConsoleTransport.js 输出日志到控制台，XxxFileTransport.js 输出日志到文件，XxxFileBufferTransport.js 输出日志到内存和文件中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// lib/XxxConsoleTransport.js</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> XxxConsoleTransport = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger&#x27;</span>).ConsoleTransport;<br><span class="hljs-keyword">const</span> levels = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger/lib/level.js&#x27;</span>);<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./utils.js&#x27;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GxjlConsoleTransport</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ConsoleTransport</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">options</span>)</span> &#123;<br><span class="hljs-built_in">super</span>(options);<br><span class="hljs-built_in">this</span>.encryptField = utils.normalizeEncryptField(options.encryptField);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>重写ConsoleTransport类的log方法，对encryptField中的字段进行加密</span><br><span class="hljs-comment"> * output log, see &#123;<span class="hljs-doctag">@link </span>Transport#log&#125;</span><br><span class="hljs-comment"> * if stderrLevel presents, will output log to stderr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">level</span></span> - log level, in upper case</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;Array&#125;</span> <span class="hljs-variable">args</span></span> - all arguments</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">meta</span></span> - meta infomations</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-title">log</span>(<span class="hljs-params">level, args, meta</span>)</span> &#123;<br><span class="hljs-comment">// const encryptString = utils.formatObject(args, this.encryptField);</span><br><span class="hljs-keyword">const</span> msg = utils.format(level, args, meta, <span class="hljs-built_in">this</span>.options, <span class="hljs-built_in">this</span>.encryptField);<br><br><span class="hljs-keyword">if</span> (levels[level] &gt;= <span class="hljs-built_in">this</span>.options.stderrLevel &amp;&amp; levels[level] &lt; levels.NONE) &#123;<br>process.stderr.write(msg);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>process.stdout.write(msg);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">module</span>.exports = XxxConsoleTransport;<br></code></pre></td></tr></table></figure><blockquote><p>​<code>XxxFileTransport</code>和<code>XxxConsoleTransport</code>类似，重写 log 函数新增<code>encryptField</code>传参，<code>XxxFileBufferTransport</code>只修改从<code>XxxFileTransport</code>继承即可</p></blockquote><p>​transport 的 log 函数会调用<code>utils.format()</code>函数对日志进行格式化，并返回进行输出操作</p><p>​</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><span class="hljs-keyword">const</span> &#123;<br>cloneDeep: lodashCloneDeep,<br>isObject: lodashIsObject,<br>isArray: lodashIsArray,<br>isString: lodashIsString,<br>&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger/lib/utils.js&#x27;</span>);<br><span class="hljs-keyword">const</span> utility = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;utility&#x27;</span>);<br><span class="hljs-keyword">const</span> iconv = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;iconv-lite&#x27;</span>);<br><span class="hljs-keyword">const</span> LIMIT_MAX_SIZE = <span class="hljs-number">255</span>; <span class="hljs-comment">// 日志字段最大长度，超出部分使用省略号(...)</span><br><br><span class="hljs-keyword">const</span> hostname = os.hostname();<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>格式化日志参数对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123; Array &#125;</span> </span>args 需要输出的日志参数对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123; Object &#125;</span> </span>encryptField 需要加密（脱敏）的字段集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;string&#125;</span> </span>返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">formatObject</span>(<span class="hljs-params">args, encryptField</span>) </span>&#123;<br><span class="hljs-keyword">let</span> newArgs = lodashCloneDeep(args); <span class="hljs-comment">// JSON.parse(JSON.stringify(args))</span><br>newArgs = nestedEncryptObject(newArgs, encryptField);<br><span class="hljs-keyword">const</span> formatString = <span class="hljs-built_in">Object</span>.values(newArgs).map(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (!elem) <span class="hljs-keyword">return</span> elem;<br><span class="hljs-keyword">if</span> (lodashIsObject(elem) || lodashIsArray(elem)) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">JSON</span>.stringify(elem);<br>&#125;<br><span class="hljs-keyword">return</span> elem;<br>&#125;);<br><span class="hljs-keyword">return</span> formatString.join(<span class="hljs-string">&#x27;&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>将需要加密的字段进行标准化，格式如下</span><br><span class="hljs-comment"> * eg: [&#123; value: &#x27;loginId&#x27;, regx: /^(\w&#123;3&#125;)\w&#123;4&#125;(\w+)/ &#125;, &#123; value: &#x27;passWord&#x27;, regx: /^(\w&#123;4&#125;)\w&#123;24&#125;(\w+)/ &#125;]</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123; Array &#125;</span> </span>keys 所有需要加密（脱敏）的字段</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;string&#125;</span> </span>返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">normalizeEncryptField</span>(<span class="hljs-params">keys</span>) </span>&#123;<br><span class="hljs-keyword">const</span> obj = &#123;&#125;;<br>keys.forEach(<span class="hljs-function"><span class="hljs-params">elem</span> =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (lodashIsObject(elem) &amp;&amp; elem.value) &#123;<br>obj[elem.value] = &#123;<br>value: elem.value,<br>regx: elem.regx,<br>&#125;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>obj[elem] = &#123;<br>value: elem,<br>regx: <span class="hljs-literal">null</span>,<br>&#125;;<br>&#125;<br>&#125;);<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>加密（脱敏）字段</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> </span>obj 需要加密的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> </span>key 需要加密的对象的key</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>encryptField 需要加密（脱敏）的字段集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;*&#125;</span> </span>返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypted</span>(<span class="hljs-params">obj, key, encryptField</span>) </span>&#123;<br><span class="hljs-keyword">const</span> encryptKeys = <span class="hljs-built_in">Object</span>.keys(encryptField);<br><span class="hljs-keyword">if</span> (encryptKeys.indexOf(key) &gt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">const</span> middle = obj[key].length - <span class="hljs-number">8</span>;<br><span class="hljs-keyword">let</span> regx = <span class="hljs-built_in">RegExp</span>(<span class="hljs-string">&#x27;^(\\w&#123;4&#125;)\\w&#123;&#x27;</span> + middle + <span class="hljs-string">&#x27;&#125;(\\w+)&#x27;</span>);<br><span class="hljs-keyword">const</span> replacement = <span class="hljs-string">`$1<span class="hljs-subst">$&#123;<span class="hljs-string">&#x27;*&#x27;</span>.repeat(middle)&#125;</span>$2`</span>;<br><span class="hljs-keyword">if</span> (encryptField[key].regx) &#123;<br>regx = encryptField[key].regx;<br>&#125;<br>obj[key] = obj[key].replace(regx, replacement);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (lodashIsString(obj[key]) &amp;&amp; obj[key].length &gt; LIMIT_MAX_SIZE) &#123;<br>obj[key] = obj[key].substring(<span class="hljs-number">0</span>, LIMIT_MAX_SIZE - <span class="hljs-number">3</span>) + <span class="hljs-string">&#x27;...&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>找到所有的对象，并按encryptField匹配加密</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>obj  需要加密的对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>encryptField 需要加密（脱敏）的字段集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;*&#125;</span> </span>返回结果</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">nestedEncryptObject</span>(<span class="hljs-params">obj, encryptField</span>) </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">in</span> obj) &#123;<br><span class="hljs-keyword">if</span> (obj.hasOwnProperty(key)) &#123;<br><span class="hljs-keyword">if</span> (lodashIsObject(obj[key]) || lodashIsArray(obj[key])) &#123;<br>nestedEncryptObject(obj[key], encryptField);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>obj = encrypted(obj, key, encryptField);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> obj;<br>&#125;<br><br><span class="hljs-keyword">const</span> formatError = utils.formatError;<br><br><span class="hljs-built_in">module</span>.exports = &#123;<br>...utils,<br>normalizeEncryptField,<br>formatError,<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重写egg-logger/lib/utils.js的format方法，使用formatObject代替util.format.apply(util, args);</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Invoke link: &#123;<span class="hljs-doctag">@Link </span>Logger#log&#125; -&gt; &#123;<span class="hljs-doctag">@link </span>Transport#log&#125; -&gt; LoggerUtils.format</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@method </span>LoggerUtils#format</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">level</span></span> - log level</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Array&#125;</span> <span class="hljs-variable">args</span></span> - format arguments</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">meta</span></span> - loging behaviour meta infomation</span><br><span class="hljs-comment"> *  - &#123;String&#125; level</span><br><span class="hljs-comment"> *  - &#123;Boolean&#125; raw</span><br><span class="hljs-comment"> *  - &#123;Function&#125; formatter</span><br><span class="hljs-comment"> *  - &#123;Error&#125; error</span><br><span class="hljs-comment"> *  - &#123;String&#125; message</span><br><span class="hljs-comment"> *  - &#123;Number&#125; pid</span><br><span class="hljs-comment"> *  - &#123;String&#125; hostname</span><br><span class="hljs-comment"> *  - &#123;String&#125; date</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">options</span></span> - &#123;<span class="hljs-doctag">@link </span>Transport&#125;&#x27;s options</span><br><span class="hljs-comment"> *  - &#123;String&#125; encoding</span><br><span class="hljs-comment"> *  - &#123;Boolean&#125; json</span><br><span class="hljs-comment"> *  - &#123;Function&#125; formatter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Buffer&#125;</span> </span>formatted log string buffer</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-title">format</span>(<span class="hljs-params">level, args, meta, options, encryptField</span>)</span> &#123;<br>meta = meta || &#123;&#125;;<br><span class="hljs-keyword">let</span> message;<br><span class="hljs-keyword">let</span> output;<br><span class="hljs-keyword">let</span> formatter = meta.formatter || options.formatter;<br><span class="hljs-keyword">if</span> (meta.ctx &amp;&amp; options.contextFormatter) formatter = options.contextFormatter;<br><br><span class="hljs-keyword">if</span> (args[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Error</span>) &#123;<br>message = formatError(args[<span class="hljs-number">0</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>message = formatObject(args, encryptField).trim();<br>&#125;<br><span class="hljs-keyword">if</span> (meta.raw === <span class="hljs-literal">true</span>) &#123;<br>output = message;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (options.json === <span class="hljs-literal">true</span> || formatter) &#123;<br>meta.level = level;<br>meta.date = utility.logDate(<span class="hljs-string">&#x27;,&#x27;</span>);<br>meta.pid = process.pid;<br>meta.hostname = hostname;<br>meta.message = message;<br>output = options.json === <span class="hljs-literal">true</span> ? <span class="hljs-built_in">JSON</span>.stringify(meta) : formatter(meta);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>output = message;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!output) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Buffer(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>output += options.eol;<br><br><span class="hljs-comment">// convert string to buffer when encoding is not utf8</span><br><span class="hljs-keyword">return</span> options.encoding === <span class="hljs-string">&#x27;utf8&#x27;</span> ? output : iconv.encode(output, options.encoding);<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="自定义-logger"><a href="#自定义-logger" class="headerlink" title="自定义 logger"></a>自定义 logger</h4><p>将自定义的 Transport 绑定到自定义的 logger 上</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// lib/XxxLogger.js</span><br><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> Logger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger&#x27;</span>).Logger;<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger/lib/utils.js&#x27;</span>);<br><span class="hljs-keyword">const</span> XxxFileTransport = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./XxxFileTransport&#x27;</span>);<br><span class="hljs-keyword">const</span> XxxFileBufferTransport = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./XxxFileBufferTransport&#x27;</span>);<br><span class="hljs-keyword">const</span> XxxConsoleTransport = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./XxxConsoleTransport&#x27;</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@description </span>自定义的logger，使用自定义的XxxFileTransport， XxxFileBufferTransport，XxxConsoleTransport</span><br><span class="hljs-comment"> *  代替原来的FileTransport、FileBufferTransport、ConsoleTransport.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@extends <span class="hljs-variable">Logger</span></span></span><br><span class="hljs-comment"> * Support three transports: Console, File and JSON File</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">XxxLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Logger</span> </span>&#123;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@constructor</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">options</span></span></span><br><span class="hljs-comment">   *  - &#123;String&#125; dir - log base dir</span><br><span class="hljs-comment">   *  - &#123;String&#125; file - log file, support relavie path</span><br><span class="hljs-comment">   *  - &#123;String&#125; [encoding = utf8] - log string encoding</span><br><span class="hljs-comment">   *  - &#123;String&#125; [level = INFO] - file log level</span><br><span class="hljs-comment">   *  - &#123;String&#125; [consoleLevel = NONE] - console log level</span><br><span class="hljs-comment">   *  - &#123;Function&#125; [formatter] - log format function</span><br><span class="hljs-comment">   *  - &#123;String&#125; [jsonFile] - JSON log file</span><br><span class="hljs-comment">   *  - &#123;Boolean&#125; [outputJSON = false] - send JSON log or not</span><br><span class="hljs-comment">   *  - &#123;Boolean&#125; [buffer] - use &#123;<span class="hljs-doctag">@link </span>FileBufferTransport&#125; or not</span><br><span class="hljs-comment">   *  - &#123;String&#125; [eol] - end of line char</span><br><span class="hljs-comment">   *  - &#123;String&#125; encryptField - encrypt field of  log</span><br><span class="hljs-comment">   *  - &#123;String&#125; [concentrateError] - whether write error logger to common-error.log, `duplicate` / `redirect` / `ignore`</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">options</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(options);<br>    <span class="hljs-keyword">if</span> (!path.isAbsolute(<span class="hljs-built_in">this</span>.options.file)) <span class="hljs-built_in">this</span>.options.file = path.join(<span class="hljs-built_in">this</span>.options.dir, <span class="hljs-built_in">this</span>.options.file);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.options.outputJSON === <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-built_in">this</span>.options.file) &#123;<br>      <span class="hljs-built_in">this</span>.options.jsonFile = <span class="hljs-built_in">this</span>.options.file.replace(<span class="hljs-regexp">/\.log$/</span>, <span class="hljs-string">&#x27;.json.log&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> EggFileTransport = <span class="hljs-built_in">this</span>.options.buffer === <span class="hljs-literal">true</span> ? XxxFileBufferTransport : XxxFileTransport;<br><br>    <span class="hljs-keyword">const</span> fileTransport = <span class="hljs-keyword">new</span> EggFileTransport(&#123;<br>      file: <span class="hljs-built_in">this</span>.options.file,<br>      level: <span class="hljs-built_in">this</span>.options.level || <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>      encoding: <span class="hljs-built_in">this</span>.options.encoding,<br>      formatter: <span class="hljs-built_in">this</span>.options.formatter,<br>      contextFormatter: <span class="hljs-built_in">this</span>.options.contextFormatter,<br>      flushInterval: <span class="hljs-built_in">this</span>.options.flushInterval,<br>      eol: <span class="hljs-built_in">this</span>.options.eol,<br>      encryptField: <span class="hljs-built_in">this</span>.options.encryptField,<br>    &#125;);<br>    <span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;file&#x27;</span>, fileTransport);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.options.jsonFile) &#123;<br>      <span class="hljs-keyword">const</span> jsonFileTransport = <span class="hljs-keyword">new</span> EggFileTransport(&#123;<br>        file: <span class="hljs-built_in">this</span>.options.jsonFile,<br>        level: <span class="hljs-built_in">this</span>.options.level,<br>        encoding: <span class="hljs-built_in">this</span>.options.encoding,<br>        flushInterval: <span class="hljs-built_in">this</span>.options.flushInterval,<br>        json: <span class="hljs-literal">true</span>,<br>        eol: <span class="hljs-built_in">this</span>.options.eol,<br>        encryptField: <span class="hljs-built_in">this</span>.options.encryptField,<br>      &#125;);<br>      <span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;jsonFile&#x27;</span>, jsonFileTransport);<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> consoleTransport = <span class="hljs-keyword">new</span> GxjlConsoleTransport(&#123;<br>      level: <span class="hljs-built_in">this</span>.options.consoleLevel,<br>      formatter: utils.consoleFormatter,<br>      contextFormatter: <span class="hljs-built_in">this</span>.options.contextFormatter,<br>      eol: <span class="hljs-built_in">this</span>.options.eol,<br>      encryptField: <span class="hljs-built_in">this</span>.options.encryptField,<br>    &#125;);<br>    <span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;console&#x27;</span>, consoleTransport);<br>  &#125;<br>  ...<br>&#125;<br><br><br><span class="hljs-built_in">module</span>.exports = XxxLogger;<br></code></pre></td></tr></table></figure><h4 id="添加-app-xxxLogger"><a href="#添加-app-xxxLogger" class="headerlink" title="添加 app.xxxLogger"></a>添加 app.xxxLogger</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// app.js</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> XxxLogger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./lib/XxxLogger&#x27;</span>);<br><span class="hljs-keyword">const</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger/lib/utils.js&#x27;</span>);<br><br><span class="hljs-keyword">const</span> defaults = &#123;<br>env: <span class="hljs-string">&#x27;default&#x27;</span>,<br>type: <span class="hljs-string">&#x27;&#x27;</span>,<br>dir: <span class="hljs-string">&#x27;&#x27;</span>,<br>encoding: <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>level: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>consoleLevel: <span class="hljs-string">&#x27;NONE&#x27;</span>,<br>outputJSON: <span class="hljs-literal">false</span>,<br>buffer: <span class="hljs-literal">true</span>,<br>appLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br>coreLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br>agentLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br>errorLogName: <span class="hljs-string">&#x27;&#x27;</span>,<br>concentrateError: <span class="hljs-string">&#x27;duplicate&#x27;</span>,<br>&#125;;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-params">app</span> =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> config = app.config;<br><span class="hljs-keyword">const</span> loggerConfig = utils.assign(&#123;&#125;, defaults, config.logger);<br>loggerConfig.type = app.type;<br><br><span class="hljs-keyword">if</span> (app.config.env === <span class="hljs-string">&#x27;prod&#x27;</span> &amp;&amp; loggerConfig.level === <span class="hljs-string">&#x27;DEBUG&#x27;</span> &amp;&amp; !loggerConfig.allowDebugAtProd) &#123;<br>loggerConfig.level = <span class="hljs-string">&#x27;INFO&#x27;</span>;<br>&#125;<br><br>app.xxxLogger = <span class="hljs-keyword">new</span> XxxLogger(utils.assign(&#123;&#125;, loggerConfig, config.xxxLogger));<br><br><span class="hljs-comment">// 重新载入日志，避免写入日志文件错误</span><br>app.messenger.on(<span class="hljs-string">&#x27;log-reload&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>app.xxxLogger.reload(<span class="hljs-string">&#x27;[egg-logger-xxx] got log-reload message&#x27;</span>);<br>app.xxxLogger.info(<span class="hljs-string">&#x27;[egg-logger-xxx]  app logger reload: got log-reload message&#x27;</span>);<br>&#125;);<br><br>app.ready(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-keyword">if</span> (loggerConfig.disableConsoleAfterReady) &#123;<br>app.xxxLogger.disable(<span class="hljs-string">&#x27;console&#x27;</span>);<br>&#125;<br>&#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="添加-ctx-xxxLogger"><a href="#添加-ctx-xxxLogger" class="headerlink" title="添加 ctx.xxxLogger"></a>添加 ctx.xxxLogger</h4><p>访问 Context 下的 Logger 可以输出<code>userId、traceId、method、url</code>等信息,例如：[-/127.0.0.1/bd5ff220-3ab7-11eb-9110-85a4f7631238/19ms POST /app/v1/login]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// app/extend/content.js</span><br><span class="hljs-meta">&#x27;use strict&#x27;</span>;<br><br><span class="hljs-keyword">const</span> XXX_CONTEXT_LOGGERS = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;Context#xxxLogger&#x27;</span>);<br><span class="hljs-keyword">const</span> EggContextLogger = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger&#x27;</span>).EggContextLogger;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Context扩展对象</span><br><span class="hljs-comment"> */</span><br><span class="hljs-built_in">module</span>.exports = &#123;<br><span class="hljs-keyword">get</span> <span class="hljs-title">xxxLogger</span>() &#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>[XXX_CONTEXT_LOGGERS]) &#123;<br><span class="hljs-built_in">this</span>[XXX_CONTEXT_LOGGERS] = <span class="hljs-keyword">new</span> EggContextLogger(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.app.xxxLogger);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>[XXX_CONTEXT_LOGGERS];<br>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>​ 日志级别：INFO</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.xxxLogger.info(<span class="hljs-string">&#x27;入参:&#x27;</span>, &#123; <span class="hljs-attr">header</span>: ctx.request.header, <span class="hljs-attr">body</span>: ctx.request.body &#125;);<br></code></pre></td></tr></table></figure><p>日志级别：ERROR</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.xxxLogger.error(e);<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>自此我们完成了自定义一个 Egg-logger。虽然会有点复杂，但在实现的过程中对 Egg-logger 加深了理解，而且以后的扩展其他功能也很方便。</p>]]></content>
    
    
    <categories>
      
      <category>经验总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
      <tag>EggJs</tag>
      
      <tag>Egg-logger</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义Egg Logger(一)：egg-logger源码分析</title>
    <link href="/2020/12/14/egg-custom-logger-1/"/>
    <url>/2020/12/14/egg-custom-logger-1/</url>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>egg-logger 是 EGG 框架内置的企业级日志模块，提供了日志分级，统一错误日志、自定义日志、自动切割日志等特性，</p><p>该模块由 logger 和 transport 组成。</p><h4 id="有哪些-Logger？"><a href="#有哪些-Logger？" class="headerlink" title="有哪些 Logger？"></a>有哪些 Logger？</h4><ul><li>Agent Logger(<code>egg-agent.log</code>)：agent 进程日志，框架和使用到 agent 进程执行任务的插件会打印一些日志到这里。</li><li>Core Logger(<code>egg-web.log</code> )： 框架内核、插件日志。</li><li>Error Logger( <code>common-error.log</code> )：实际一般不会直接使用它，任何 logger 的 <code>.error()</code> 调用输出的日志都会重定向到这里，重点通过查看此日志定位异常。</li><li>App Logger (<code>$&#123;appInfo.name&#125;-web.log</code>):应用相关日志，供应用开发者使用的日志。我们在绝大数情况下都在使用它。</li><li>Custom Logger: 自定义的日志</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// egg-logger/lib/egg/loggers.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Loggers</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Map</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@constructor</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param  <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">config</span></span> - egg app config</span><br><span class="hljs-comment"> * - logger</span><br><span class="hljs-comment"> *   - &#123;String&#125; env - egg app runtime env string, detail please see `app.config.env`</span><br><span class="hljs-comment"> *   - &#123;String&#125; type - current process type, `application` or `agent`</span><br><span class="hljs-comment"> *   - &#123;String&#125; dir - log file dir</span><br><span class="hljs-comment"> *   - &#123;String&#125; [encoding = utf8] - log string encoding</span><br><span class="hljs-comment"> *   - &#123;String&#125; [level = INFO] - file log level</span><br><span class="hljs-comment"> *   - &#123;String&#125; [consoleLevel = NONE] - console log level</span><br><span class="hljs-comment"> *   - &#123;Boolean&#125; [outputJSON = false] - send JSON log or not</span><br><span class="hljs-comment"> *   - &#123;Boolean&#125; [buffer = true] - use &#123;<span class="hljs-doctag">@link </span>FileBufferTransport&#125; or not</span><br><span class="hljs-comment"> *   - &#123;String&#125; appLogName - egg app file logger name</span><br><span class="hljs-comment"> *   - &#123;String&#125; coreLogName - egg core file logger name</span><br><span class="hljs-comment"> *   - &#123;String&#125; agentLogName - egg agent file logger name</span><br><span class="hljs-comment"> *   - &#123;String&#125; errorLogName - err common error logger name</span><br><span class="hljs-comment"> *   - &#123;String&#125; eol - end of line char</span><br><span class="hljs-comment"> *   - &#123;String&#125; [concentrateError = duplicate] - whether write error logger to common-error.log, `duplicate` / `redirect` / `ignore`</span><br><span class="hljs-comment"> * - customLogger</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">config</span>)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><br><span class="hljs-keyword">const</span> loggerConfig = utils.assign(&#123;&#125;, defaults, config.logger);<br><span class="hljs-keyword">const</span> customLoggerConfig = config.customLogger;<br><br>debug(<span class="hljs-string">&#x27;Init loggers with options %j&#x27;</span>, loggerConfig);<br>assert(loggerConfig.type, <span class="hljs-string">&#x27;should pass config.logger.type&#x27;</span>);<br>assert(loggerConfig.dir, <span class="hljs-string">&#x27;should pass config.logger.dir&#x27;</span>);<br>assert(loggerConfig.appLogName, <span class="hljs-string">&#x27;should pass config.logger.appLogName&#x27;</span>);<br>assert(loggerConfig.coreLogName, <span class="hljs-string">&#x27;should pass config.logger.coreLogName&#x27;</span>);<br>assert(loggerConfig.agentLogName, <span class="hljs-string">&#x27;should pass config.logger.agentLogName&#x27;</span>);<br>assert(loggerConfig.errorLogName, <span class="hljs-string">&#x27;should pass config.logger.errorLogName&#x27;</span>);<br><br><span class="hljs-comment">// Error Logger</span><br><span class="hljs-keyword">const</span> errorLogger = <span class="hljs-keyword">new</span> ErrorLogger(<br>utils.assign(&#123;&#125;, loggerConfig, &#123;<br>file: loggerConfig.errorLogName,<br>&#125;)<br>);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;errorLogger&#x27;</span>, errorLogger);<br><br><span class="hljs-comment">// Agent Logger and Core Logger</span><br><span class="hljs-keyword">if</span> (loggerConfig.type === <span class="hljs-string">&#x27;agent&#x27;</span>) &#123;<br><span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> Logger(<br>utils.assign(&#123;&#125;, loggerConfig, &#123;<br>file: loggerConfig.agentLogName,<br>&#125;)<br>);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;logger&#x27;</span>, logger);<br><br><span class="hljs-keyword">const</span> coreLogger = <span class="hljs-keyword">new</span> Logger(<br>utils.assign(&#123;&#125;, loggerConfig, loggerConfig.coreLogger, &#123;<br>file: loggerConfig.agentLogName,<br>&#125;)<br>);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;coreLogger&#x27;</span>, coreLogger);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> Logger(<br>utils.assign(&#123;&#125;, loggerConfig, &#123;<br>file: loggerConfig.appLogName,<br>&#125;)<br>);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;logger&#x27;</span>, logger);<br><br><span class="hljs-keyword">const</span> coreLogger = <span class="hljs-keyword">new</span> Logger(<br>utils.assign(&#123;&#125;, loggerConfig, loggerConfig.coreLogger, &#123;<br>file: loggerConfig.coreLogName,<br>&#125;)<br>);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;coreLogger&#x27;</span>, coreLogger);<br>&#125;<br><br><span class="hljs-comment">// Custom Logger</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> name <span class="hljs-keyword">in</span> customLoggerConfig) &#123;<br><span class="hljs-keyword">const</span> logger = <span class="hljs-keyword">new</span> CustomLogger(utils.assign(&#123;&#125;, loggerConfig, customLoggerConfig[name]));<br><span class="hljs-built_in">this</span>.set(name, logger);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="有哪些-Transport？"><a href="#有哪些-Transport？" class="headerlink" title="有哪些 Transport？"></a>有哪些 Transport？</h4><p>Transport 是一种传输通道，一个 logger 可包含多个传输通道。比如默认的 logger 就有 fileTransport 和 consoleTransport 两个通道， 分别负责打印到文件和终端。</p><ul><li>Console Transport： 指定日志级别，输出日志到控制台（egg-logger/transports/console.js）</li><li>File Transport : 输出日志到文件（egg-logger/transports/file.js）</li><li>File Buffer Transport : FileBufferTransport 是 FileTransport 的子类。在内存中保存日志，并间隔一定的时间将日志刷新到文件中（egg-logger/transports/file_buffer.js）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// egg-logger/lib/egg/logger.js</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EggLogger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Logger</span> </span>&#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@constructor</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">options</span></span></span><br><span class="hljs-comment"> *  - &#123;String&#125; dir - log base dir</span><br><span class="hljs-comment"> *  - &#123;String&#125; file - log file, support relavie path</span><br><span class="hljs-comment"> *  - &#123;String&#125; [encoding = utf8] - log string encoding</span><br><span class="hljs-comment"> *  - &#123;String&#125; [level = INFO] - file log level</span><br><span class="hljs-comment"> *  - &#123;String&#125; [consoleLevel = NONE] - console log level</span><br><span class="hljs-comment"> *  - &#123;Function&#125; [formatter] - log format function</span><br><span class="hljs-comment"> *  - &#123;String&#125; [jsonFile] - JSON log file</span><br><span class="hljs-comment"> *  - &#123;Boolean&#125; [outputJSON = false] - send JSON log or not</span><br><span class="hljs-comment"> *  - &#123;Boolean&#125; [buffer] - use &#123;<span class="hljs-doctag">@link </span>FileBufferTransport&#125; or not</span><br><span class="hljs-comment"> *  - &#123;String&#125; [eol] - end of line char</span><br><span class="hljs-comment"> *  - &#123;String&#125; [concentrateError] - whether write error logger to common-error.log, `duplicate` / `redirect` / `ignore`</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">options</span>)</span> &#123;<br><span class="hljs-built_in">super</span>(options);<br><br><span class="hljs-keyword">if</span> (!path.isAbsolute(<span class="hljs-built_in">this</span>.options.file)) <span class="hljs-built_in">this</span>.options.file = path.join(<span class="hljs-built_in">this</span>.options.dir, <span class="hljs-built_in">this</span>.options.file);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.options.outputJSON === <span class="hljs-literal">true</span> &amp;&amp; <span class="hljs-built_in">this</span>.options.file) &#123;<br><span class="hljs-built_in">this</span>.options.jsonFile = <span class="hljs-built_in">this</span>.options.file.replace(<span class="hljs-regexp">/\.log$/</span>, <span class="hljs-string">&#x27;.json.log&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> EggFileTransport = <span class="hljs-built_in">this</span>.options.buffer === <span class="hljs-literal">true</span> ? FileBufferTransport : FileTransport;<br><br><span class="hljs-keyword">const</span> fileTransport = <span class="hljs-keyword">new</span> EggFileTransport(&#123;<br>file: <span class="hljs-built_in">this</span>.options.file, <span class="hljs-comment">// `$&#123;appInfo.name&#125;-web.log`路径</span><br>level: <span class="hljs-built_in">this</span>.options.level || <span class="hljs-string">&#x27;INFO&#x27;</span>, <span class="hljs-comment">// 日志级别,默认INFO</span><br>encoding: <span class="hljs-built_in">this</span>.options.encoding, <span class="hljs-comment">// 日志编码默认UTF-8</span><br>formatter: <span class="hljs-built_in">this</span>.options.formatter, <span class="hljs-comment">// 日志输出格式化函数，如果为空使用utils.defaultFormatter</span><br>contextFormatter: <span class="hljs-built_in">this</span>.options.contextFormatter, <span class="hljs-comment">// 可以获取ctx的userId、ctx.tracer、method、url等信息</span><br>flushInterval: <span class="hljs-built_in">this</span>.options.flushInterval, <span class="hljs-comment">// 将内存中的日志刷新到文件中的间隔时间，默认1000</span><br>eol: <span class="hljs-built_in">this</span>.options.eol, <span class="hljs-comment">// \r\n</span><br>&#125;);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;file&#x27;</span>, fileTransport); <span class="hljs-comment">// 添加FileTransport到logger</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.options.jsonFile) &#123;<br><span class="hljs-keyword">const</span> jsonFileTransport = <span class="hljs-keyword">new</span> EggFileTransport(&#123;<br>file: <span class="hljs-built_in">this</span>.options.jsonFile,<br>level: <span class="hljs-built_in">this</span>.options.level,<br>encoding: <span class="hljs-built_in">this</span>.options.encoding,<br>flushInterval: <span class="hljs-built_in">this</span>.options.flushInterval,<br>json: <span class="hljs-literal">true</span>,<br>eol: <span class="hljs-built_in">this</span>.options.eol,<br>&#125;);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;jsonFile&#x27;</span>, jsonFileTransport); <span class="hljs-comment">// 添加json格式的FileTransport到logger</span><br>&#125;<br><br><span class="hljs-keyword">const</span> consoleTransport = <span class="hljs-keyword">new</span> ConsoleTransport(&#123;<br>level: <span class="hljs-built_in">this</span>.options.consoleLevel,<br>formatter: utils.consoleFormatter,<br>contextFormatter: <span class="hljs-built_in">this</span>.options.contextFormatter,<br>eol: <span class="hljs-built_in">this</span>.options.eol,<br>&#125;);<br><span class="hljs-built_in">this</span>.set(<span class="hljs-string">&#x27;console&#x27;</span>, consoleTransport); <span class="hljs-comment">// 添加ConsoleTransport到logger</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>也可以根据实际项目需要可以定义自己的 Transport。<code>app.getLogger(&#39;xxLogger&#39;).set(&#39;custom&#39;, new CustomTransport(...));</code></p></blockquote><h4 id="如何输出日志？"><a href="#如何输出日志？" class="headerlink" title="如何输出日志？"></a>如何输出日志？</h4><p>egg-logger 通过 logger、transport 的 log 函数将需要打印的日志信息输出到 console 或者 file 中，具体如下：</p><h5 id="1-根据日志级别调用-Logger-的-log-函数"><a href="#1-根据日志级别调用-Logger-的-log-函数" class="headerlink" title="1. 根据日志级别调用 Logger 的 log 函数"></a>1. 根据日志级别调用 Logger 的 log 函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// egg-logger/lib/logger.js</span><br>[<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;debug&#x27;</span>].forEach(<span class="hljs-function"><span class="hljs-params">level</span> =&gt;</span> &#123;<br><span class="hljs-keyword">const</span> LEVEL = level.toUpperCase();<br>Logger.prototype[level] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-built_in">this</span>.log(LEVEL, <span class="hljs-built_in">arguments</span>);<br>&#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><h5 id="2-发送日志到所有的-Transport"><a href="#2-发送日志到所有的-Transport" class="headerlink" title="2. 发送日志到所有的 Transport"></a>2. 发送日志到所有的 Transport</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// egg-logger/lib/logger.js</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Map</span> </span>&#123;<br> ...<br> <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Send log to all transports.</span><br><span class="hljs-comment">   * It&#x27;s proxy to &#123;<span class="hljs-doctag">@link </span>Transport&#125;&#x27;s log method.</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">level</span></span> - log level</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Array&#125;</span> <span class="hljs-variable">args</span></span> - log arguments</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">meta</span></span> - log meta</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">log</span>(<span class="hljs-params">level, args, meta</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> excludes;<br>    <span class="hljs-keyword">let</span> &#123; logger, options &#125; = <span class="hljs-built_in">this</span>.duplicateLoggers.get(level) || &#123;&#125;;<br>    <span class="hljs-keyword">if</span> (logger) &#123;<br>      excludes = options.excludes;<br>      logger.log(level, args, meta);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      logger = <span class="hljs-built_in">this</span>.redirectLoggers.get(level);<br>      <span class="hljs-keyword">if</span> (logger) &#123;<br>        logger.log(level, args, meta);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [ key, transport ] <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span>.entries()) &#123;<br>      <span class="hljs-keyword">if</span> (transport.shouldLog(level) &amp;&amp; !(excludes &amp;&amp; excludes.includes(key))) &#123;<br>        transport.log(level, args, meta); <span class="hljs-comment">// 调用transport下的log函数</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-Console-Transport-和-File-Transport-的-log-函数"><a href="#3-Console-Transport-和-File-Transport-的-log-函数" class="headerlink" title="3. Console Transport 和 File Transport 的 log 函数"></a>3. Console Transport 和 File Transport 的 log 函数</h5><p>通过调用父类 Transport 的 log 函数，格式化日志并输出到 Console、File</p><h5 id="4-格式化日志"><a href="#4-格式化日志" class="headerlink" title="4. 格式化日志"></a>4. 格式化日志</h5><p>Transport 类中，通过调用 utils.format(level, args, meta, options) 对日志进行格式化操作并返回</p><h4 id="ctx-logger-与-app-logger-的区别"><a href="#ctx-logger-与-app-logger-的区别" class="headerlink" title="ctx.logger 与 app.logger 的区别?"></a>ctx.logger 与 app.logger 的区别?</h4><p>app.logger 是 Logger 类的对象，而 ctx.logger 是在 app.logger 的基础上做的封装，是一个 ContextLogger 的对象。app.logger 调用的是 EggApplication 中的<code>logger()</code>，app.logger 是通过 egg-logger 的 Loggers 类创建，日志输出格式使用 utils.defaultFormatter。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// egg/lib/egg.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * application logger, log file is `$HOME/logs/&#123;appname&#125;/&#123;appname&#125;-web`</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@member <span class="hljs-type">&#123;Logger&#125;</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since </span>1.0.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">get</span> <span class="hljs-title">logger</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getLogger(<span class="hljs-string">&#x27;logger&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// egg/lib/core/logger.js</span><br><span class="hljs-keyword">const</span> Loggers = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;egg-logger&#x27;</span>).EggLoggers;<br><br><span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createLoggers</span>(<span class="hljs-params">app</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> loggerConfig = app.config.logger;<br>  loggerConfig.type = app.type;<br><br>  <span class="hljs-keyword">if</span> (app.config.env === <span class="hljs-string">&#x27;prod&#x27;</span> &amp;&amp; loggerConfig.level === <span class="hljs-string">&#x27;DEBUG&#x27;</span> &amp;&amp; !loggerConfig.allowDebugAtProd) &#123;<br>    loggerConfig.level = <span class="hljs-string">&#x27;INFO&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">const</span> loggers = <span class="hljs-keyword">new</span> Loggers(app.config);<br><br>  <span class="hljs-comment">// won&#x27;t print to console after started, except for local and unittest</span><br>  app.ready(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (loggerConfig.disableConsoleAfterReady) &#123;<br>      loggers.disableConsole();<br>    &#125;<br>  &#125;);<br>  loggers.coreLogger.info(<span class="hljs-string">&#x27;[egg:logger] init all loggers with options: %j&#x27;</span>, loggerConfig);<br><br>  <span class="hljs-keyword">return</span> loggers;<br>&#125;;<br><br><br><span class="hljs-comment">// egg-logger/lib/utils.js</span><br><span class="hljs-function"><span class="hljs-title">defaultFormatter</span>(<span class="hljs-params">meta</span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> meta.date + <span class="hljs-string">&#x27; &#x27;</span> + meta.level + <span class="hljs-string">&#x27; &#x27;</span> + meta.pid + <span class="hljs-string">&#x27; &#x27;</span> + meta.message;<br>&#125;,<br></code></pre></td></tr></table></figure><blockquote><p>输出示例：2020-12-14 17:42:31,903 INFO 41228 …</p></blockquote><p>ctx.logger 是一个 ContextLogger 对象，调用<code>egg/app/extend/context.js</code>中的 logger()。该 logger 是在 app logger 的基础上进行了一次封装，添加了 ctx 的 userId、ctx.tracer、method、url 等输出信息。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// egg/app/extend/context.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Wrap app.loggers with context infomation,</span><br><span class="hljs-comment"> * if a custom logger is defined by naming aLogger, then you can `ctx.getLogger(&#x27;aLogger&#x27;)`</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;String&#125;</span> <span class="hljs-variable">name</span></span> - logger name</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;Logger&#125;</span> <span class="hljs-variable">logger</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-title">getLogger</span>(<span class="hljs-params">name</span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> cache = <span class="hljs-built_in">this</span>[CONTEXT_LOGGERS];<br>  <span class="hljs-keyword">if</span> (!cache) &#123;<br>    cache = <span class="hljs-built_in">this</span>[CONTEXT_LOGGERS] = &#123;&#125;;<br>  &#125;<br><br>  <span class="hljs-comment">// read from cache</span><br>  <span class="hljs-keyword">if</span> (cache[name]) <span class="hljs-keyword">return</span> cache[name];<br><br>  <span class="hljs-comment">// get no exist logger</span><br>  <span class="hljs-keyword">const</span> appLogger = <span class="hljs-built_in">this</span>.app.getLogger(name);<br>  <span class="hljs-keyword">if</span> (!appLogger) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>  <span class="hljs-comment">// write to cache</span><br>  cache[name] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">this</span>.app.ContextLogger(<span class="hljs-built_in">this</span>, appLogger);<br>  <span class="hljs-keyword">return</span> cache[name];<br>&#125;,<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Logger for Application, wrapping app.coreLogger with context infomation</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@member <span class="hljs-type">&#123;ContextLogger&#125;</span> </span>Context#logger</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since </span>1.0.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@example</span></span><br><span class="hljs-comment"> * ```js</span><br><span class="hljs-comment"> * this.logger.info(&#x27;some request data: %j&#x27;, this.request.body);</span><br><span class="hljs-comment"> * this.logger.warn(&#x27;WARNING!!!!&#x27;);</span><br><span class="hljs-comment"> * ```</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">get</span> <span class="hljs-title">logger</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getLogger(<span class="hljs-string">&#x27;logger&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-comment">// egg-logger/lib/egg/context_logger.js</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Request context Logger, itself isn&#x27;t a &#123;<span class="hljs-doctag">@link </span>Logger&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ContextLogger</span> </span>&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@constructor</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Context&#125;</span> <span class="hljs-variable">ctx</span></span> - egg Context instance</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Logger&#125;</span> <span class="hljs-variable">logger</span></span> - Logger instance</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">ctx, logger</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>.ctx = ctx;<br>    <span class="hljs-built_in">this</span>._logger = logger;<br>  &#125;<br><br>  <span class="hljs-keyword">get</span> <span class="hljs-title">paddingMessage</span>() &#123;<br>    <span class="hljs-keyword">const</span> ctx = <span class="hljs-built_in">this</span>.ctx;<br><br>    <span class="hljs-comment">// Auto record necessary request context infomation, e.g.: user id, request spend time</span><br>    <span class="hljs-comment">// format: &#x27;[$userId/$ip/$traceId/$use_ms $method $url]&#x27;</span><br>    <span class="hljs-keyword">const</span> userId = ctx.userId || <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">const</span> traceId = ctx.tracer &amp;&amp; ctx.tracer.traceId || <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">const</span> use = ctx.starttime ? <span class="hljs-built_in">Date</span>.now() - ctx.starttime : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;[&#x27;</span> +<br>      userId + <span class="hljs-string">&#x27;/&#x27;</span> +<br>      ctx.ip + <span class="hljs-string">&#x27;/&#x27;</span> +<br>      traceId + <span class="hljs-string">&#x27;/&#x27;</span> +<br>      use + <span class="hljs-string">&#x27;ms &#x27;</span> +<br>      ctx.method + <span class="hljs-string">&#x27; &#x27;</span> +<br>      ctx.url +<br>    <span class="hljs-string">&#x27;]&#x27;</span>;<br>  &#125;<br><br>  <span class="hljs-function"><span class="hljs-title">write</span>(<span class="hljs-params">msg</span>)</span> &#123;<br>    <span class="hljs-built_in">this</span>._logger.write(msg);<br>  &#125;<br>&#125;<br><br>[ <span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-string">&#x27;warn&#x27;</span>, <span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;debug&#x27;</span> ].forEach(<span class="hljs-function"><span class="hljs-params">level</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> LEVEL = level.toUpperCase();<br>  ContextLogger.prototype[level] = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">const</span> meta = &#123;<br>      formatter: contextFormatter,<br>      paddingMessage: <span class="hljs-built_in">this</span>.paddingMessage,<br>    &#125;;<br>    <span class="hljs-built_in">Object</span>.defineProperty(meta, <span class="hljs-string">&#x27;ctx&#x27;</span>, &#123;<br>      enumerable: <span class="hljs-literal">false</span>,<br>      value: <span class="hljs-built_in">this</span>.ctx,<br>    &#125;);<br>    <span class="hljs-built_in">this</span>._logger.log(LEVEL, <span class="hljs-built_in">arguments</span>, meta);<br>  &#125;;<br>&#125;);<br><br><span class="hljs-built_in">module</span>.exports = ContextLogger;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">contextFormatter</span>(<span class="hljs-params">meta</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> meta.date + <span class="hljs-string">&#x27; &#x27;</span> + meta.level + <span class="hljs-string">&#x27; &#x27;</span> + meta.pid + <span class="hljs-string">&#x27; &#x27;</span> + meta.paddingMessage + <span class="hljs-string">&#x27; &#x27;</span> + meta.message;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>输出示例：2020-12-14 17:42:32,183 INFO 41228 [-/127.0.0.1/affe8330-3df0-11eb-a788-5fdd50ee8eb3/297ms POST /app/v1/login]…</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>经验总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Egg</tag>
      
      <tag>EggJs</tag>
      
      <tag>Egg-logger</tag>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git upstream 从其他远程仓库同步分支</title>
    <link href="/2020/12/05/git-remote/"/>
    <url>/2020/12/05/git-remote/</url>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>遇到一个场景，从 github 中 fork 一个自己的仓库,如何实现自己的仓库和原始仓库代码的合并<br>更新。第一种方式使用的 Github 的页面操作，第二种就是使用 git 命令实现该功能。把要<br>同步的仓库设置为本地仓库的 upstream，即可方便实现同步。</p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git remote add upstream https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/view-design/</span>ViewUI.git<br></code></pre></td></tr></table></figure><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ git remote -v<br><br>origin  git@github.com:chengyaojun/ViewUI.git (fetch)<br>origin  git@github.com:chengyaojun/ViewUI.git (push)<br>upstream        https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/view-design/</span>ViewUI.git (fetch)<br>upstream        https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/view-design/</span>ViewUI.git (push)<br><br></code></pre></td></tr></table></figure><h4 id="取消"><a href="#取消" class="headerlink" title="取消"></a>取消</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ git branch <span class="hljs-comment">--unset-upstream</span><br></code></pre></td></tr></table></figure><h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">$ git fetch upstream<br>$ git checkout <span class="hljs-literal">master</span><br>$ git rebase upstream/<span class="hljs-literal">master</span><br>$ git merge upstream/<span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome浏览器所有页面崩溃（转）</title>
    <link href="/2020/12/02/chrome-crash/"/>
    <url>/2020/12/02/chrome-crash/</url>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><ul><li>Chrome 浏览器所有页面崩溃，包括设置页面，“喔唷，崩溃啦！”</li><li>显示错误码：STATUS_INVALID_IMAGE_HASH</li><li>Chrome 所有插件报错，右下角一串弹框</li></ul><h4 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h4><p>Google 在 79 版本（2019 年 12 月 20 号左右）的更新中又重新启用了 Renderer Code Integrity Protection（渲染器代码完整性保护），会阻止签名不是谷歌和微软的模块加载。该功能已经在之前一个版本中导致同样的问题，并由 Google 自己禁用了。<br>要了解更多详细信息，比如报错的原理，或者想直接向 Eric 本人请教问题，请移步 Eric 的博客，他一直都在。链接在下方参考资料。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ul><li><code>Win+R</code>打开运行对话框，输入<code>regedit</code>打开注册表编辑器</li><li>导航到<code>HKEY_LOCAL_MACHINE \ SOFTWARE \ Policies \ Google \ Chrome</code></li><li>在右边窗口中，右键单击<code>新建</code>&gt;<code>DWORD(32位)值</code>以创建新密钥</li><li>双击它，然后将值名称改为<code>RendererCodeIntegrityEnabled</code>，并将值数据输入为<code>0</code></li><li>重新启动 chrome</li></ul><blockquote><p>Policies 下没有 Google 项和 Chrome 项可以新建项</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Chrome</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>右键菜单添加Open Powershell Here</title>
    <link href="/2020/12/02/right-click-menu/"/>
    <url>/2020/12/02/right-click-menu/</url>
    
    <content type="html"><![CDATA[<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>如何在 Windows 桌面右键或者在文件夹右键菜单中添加 Open Powershell Here 项目。想要实现该功能，需要</p><p>在注册表<code>HKEY_CLASSES_ROOT\Directory\</code>中修改相关项。具体如下：</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><ol><li><p>打开注册表： Win+r，输入<code>regedit</code></p></li><li><p>找到 <code>HKEY_CLASSES_ROOT\Directory\</code></p><ul><li>文件夹中右键： <code>HKEY_CLASSES_ROOT\Directory\shell</code></li><li>桌面右键：<code>HKEY_CLASSES_ROOT\Directory\Background\shell</code></li></ul></li><li><p>新建项，命名<code>powershell7</code>。</p></li><li><p>在<code>powershell7</code>项，右侧的默认项中写入 Open PowerShell Here</p></li><li><p>在<code>powershell7</code>项，右侧新建字符串值。命名 Icon，写入<code>C:\Program Files\PowerShell\7\pwsh.exe</code></p></li><li><p>在 <code>powershell7</code>下新建项 ，命名 <code>command</code>。</p></li><li><p>在<code>powershell7\command</code>项，右侧默认项中写入 <code>&quot;C:\Program Files\PowerShell\7\pwsh.exe&quot;</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>实用技巧</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
